@{
    ViewData["Title"] = "数据查询";
}

<!-- 添加CSS样式 -->
<style>
    /* 顶部导航固定区域样式 */
    .top-navbar-fixed {
        position: sticky;
        top: 0;
        z-index: 1000;
        background-color: white;
        padding: 15px;
        border-bottom: 1px solid #dee2e6;
        margin-bottom: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    /* 为固定导航腾出空间 */
    .content-below-navbar {
        padding-top: 10px;
    }
    
    /* 增强查询构建器区域 */
    .query-form-section {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid #eaeaea;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        background-color: #f9f9f9;
        transition: all 0.3s ease;
    }
    .query-form-section:hover {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    .query-form-section h5 {
        margin-bottom: 15px;
        padding-bottom: 8px;
        border-bottom: 2px solid #e9ecef;
        color: #495057;
    }
    
    /* 选中的表项样式 */
    .selected-table-item {
        background-color: #e9f7fe;
        border-left: 3px solid #0d6efd;
        margin-bottom: 5px;
        padding: 8px 12px;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.2s ease;
    }
    
    .selected-table-item:hover {
        background-color: #d4f3fd;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    /* 现代化加载动画 */
    .modern-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
        margin-right: 8px;
    }

    .large-spinner {
        width: 40px;
        height: 40px;
        border-width: 4px;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    /* 进度指示器 */
    .progress-indicator {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(90deg, #007bff, #28a745, #ffc107, #dc3545, #007bff);
        background-size: 200% 100%;
        animation: progressAnimation 2s ease-in-out infinite;
    }

    @@keyframes progressAnimation {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
    }

    /* 现代化按钮状态 */
    .btn-loading {
        position: relative;
        pointer-events: none;
    }

    .btn-loading::after {
        content: '';
        position: absolute;
        width: 16px;
        height: 16px;
        top: 50%;
        left: 50%;
        margin-left: -8px;
        margin-top: -8px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .btn-success-temp {
        background-color: #28a745 !important;
        border-color: #28a745 !important;
    }

    /* Toast通知样式 */
    .toast-container {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1060;
        max-width: 400px;
        width: 90%;
        max-width: 500px;
    }

    .toast-modern {
        border: none;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        backdrop-filter: blur(10px);
        margin-bottom: 10px;
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .toast-modern.show {
        opacity: 1;
        transform: translateY(0) scale(1);
    }

    .toast-modern.fade {
        opacity: 0;
        transform: translateY(-20px) scale(0.95);
    }

    /* Toast进入动画 */
    @@keyframes toastSlideIn {
        from {
            opacity: 0;
            transform: translateY(-30px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    /* Toast退出动画 */
    @@keyframes toastSlideOut {
        from {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
        to {
            opacity: 0;
            transform: translateY(-30px) scale(0.9);
        }
    }

    .toast-enter {
        animation: toastSlideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .toast-exit {
        animation: toastSlideOut 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .toast-success {
        background-color: rgba(40, 167, 69, 0.95);
        color: white;
    }

    .toast-error {
        background-color: rgba(220, 53, 69, 0.95);
        color: white;
    }

    .toast-info {
        background-color: rgba(13, 110, 253, 0.95);
        color: white;
    }

    .toast-warning {
        background-color: rgba(255, 193, 7, 0.95);
        color: #212529;
    }

    /* 骨架屏加载效果 */
    .skeleton {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
    }

    @@keyframes loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
    }

    .skeleton-text {
        height: 16px;
        border-radius: 4px;
        margin-bottom: 8px;
    }

    .skeleton-button {
        height: 38px;
        border-radius: 6px;
        width: 120px;
    }

    /* 按钮悬停效果增强 */
    .btn {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .btn:active {
        transform: translateY(0);
    }

    /* 确认对话框美化 */
    .swal2-popup {
        border-radius: 12px !important;
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }

    .swal2-title {
        font-size: 1.5rem !important;
        font-weight: 600 !important;
    }

    .swal2-content {
        font-size: 1rem !important;
        line-height: 1.5 !important;
    }

    /* 表格加载骨架 */
    .table-skeleton {
        width: 100%;
    }

    .table-skeleton td {
        padding: 12px;
        border-bottom: 1px solid #dee2e6;
    }

    /* 状态指示器 */
    .status-indicator {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 4px 12px;
        border-radius: 16px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .status-success {
        background-color: rgba(40, 167, 69, 0.1);
        color: #28a745;
    }

    .status-error {
        background-color: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .status-loading {
        background-color: rgba(13, 110, 253, 0.1);
        color: #0d6efd;
    }

    /* 输入框焦点增强 */
    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        transform: scale(1.02);
        transition: all 0.3s ease;
    }

    /* 卡片悬停效果 */
    .card {
        transition: all 0.3s ease;
    }

    .card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }
    
    /* 选中的列项样式 */
    .selected-column-item {
        background-color: #e5f7ed;
        border-left: 3px solid #28a745;
        margin-bottom: 5px;
        padding: 8px 12px;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.2s ease;
    }
    
    .selected-column-item:hover {
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transform: translateY(-1px);
    }
    
    /* 网格布局容器 */
    .columns-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 10px;
        margin-top: 10px;
    }
    
    /* 网格中的列项 */
    .grid-column-item {
        background-color: #e5f7ed;
        border-left: 3px solid #28a745;
        padding: 8px 12px;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.2s ease;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    /* 添加固定高度可滚动的列容器样式 */
    .columns-grid-container {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #e9ecef;
        border-radius: 5px;
        padding: 10px;
        background-color: #f8f9fa;
        margin-bottom: 10px;
    }
    
    .grid-column-item:hover {
        box-shadow: 0 3px 8px rgba(40, 167, 69, 0.2);
        transform: translateY(-2px);
        background-color: #e8f5f0;
    }
    
    .grid-column-item .column-name {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 180px;
    }
    
    /* 条件项样式 */
    .condition-item {
        background-color: #f0f8ff;
        border-left: 3px solid #0d6efd !important;
        transition: all 0.2s ease;
    }
    
    .condition-item:hover {
        box-shadow: 0 3px 8px rgba(13, 110, 253, 0.2);
        transform: translateY(-1px);
        background-color: #e6f2ff;
    }
    
    .condition-text {
        font-size: 0.95rem;
    }
    
    /* 关联项样式 */
    .join-item {
        background-color: #fff3e0;
        border-left: 3px solid #fd7e14;
        margin-bottom: 8px;
        padding: 10px 15px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        transition: all 0.2s ease;
    }
    
    .join-item:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transform: translateY(-1px);
    }
    
    /* 查询结果表格样式 */
    #resultTable {
        border-collapse: collapse;
        width: 100%;
        table-layout: auto;
    }
    
    /* 调整表格容器样式，确保sticky头部正常工作 - 完全重写 */
    .table-responsive {
        max-height: 500px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        margin-bottom: 1rem;
        position: relative; /* 为固定元素提供参考 */
    }
    
    /* 表头固定专用样式 */
    .table-sticky-header thead {
        position: sticky !important; /* 强制使用sticky */
        top: 0 !important;
        z-index: 100 !important;
    }
    
    /* 表头样式 - 增强置顶效果 */
    #resultTable th {
        background-color: #f8f9fa !important; /* 使用!important确保不被覆盖 */
        position: -webkit-sticky !important; /* Safari */
        position: sticky !important;
        top: 0 !important;
        z-index: 100 !important; /* 提高z-index确保在其他内容之上 */
        white-space: normal; /* 允许文本换行 */
        vertical-align: middle;
        text-align: center;
        min-width: 85px; /* 设置最小宽度 */
        max-width: 150px; /* 设置最大宽度 */
        height: auto; /* 自动调整高度 */
        overflow: hidden;
        text-overflow: ellipsis;
        padding: 10px 8px;
        font-size: 0.9rem;
        font-weight: 500;
        border: 1px solid #dee2e6;
        /* 添加阴影增强视觉效果 */
        box-shadow: 0 2px 3px rgba(0,0,0,0.1);
    }
    
    /* 在th后添加伪元素确保边框正确显示 */
    #resultTable th::after {
        content: '';
        position: absolute;
        left: 0;
        bottom: 0;
        width: 100%;
        border-bottom: 2px solid #c0c0c0;
    }
    
    /* 滚动时增强表头视觉效果 */
    .table-responsive.scrolling thead th {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2) !important;
    }
    
    #resultTable th:hover {
        overflow: visible;
        white-space: normal;
        z-index: 20;
    }
    
    /* 为表格单元格添加提示样式 */
    #resultTable th span.column-title {
        display: block;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    #resultTable th span.column-title:hover {
        white-space: normal;
        word-break: break-word;
    }
    
    /* 表格单元格样式 */
    #resultTable td {
        padding: 8px;
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        font-size: 0.9rem;
        border: 1px solid #dee2e6;
    }
    
    #resultTable td:hover {
        white-space: normal;
        word-break: break-word;
    }
    
    .table-responsive {
        max-height: 500px;
        overflow-y: auto;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        margin-bottom: 1rem;
    }
    
    /* 美化按钮样式 */
    .btn-action {
        transition: all 0.2s;
    }
    .btn-action:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    /* 动画效果 */
    .fade-in {
        animation: fadeIn 0.5s ease;
    }
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    /* Select2 相关样式 */
    .select2-container--bootstrap-5 {
        width: 100% !important;
    }
    
    /* 限制Select2多选选择框高度 */
    .select2-container--bootstrap-5 .select2-selection--multiple {
        max-height: 300px;
        overflow-y: auto;
    }
    
    .select2-container--bootstrap-5 .select2-selection {
        min-height: 150px;
        overflow-y: auto;
    }
    
    /* 可用列选择区域自定义样式 */
    .column-select-container {
        border: 1px solid #e9ecef;
        border-radius: 5px;
        background-color: #f8f9fa;
        margin-bottom: 10px;
    }
    
    /* 关联字段的Select2样式 */
    .form-select-fields + .select2-container--bootstrap-5 .select2-selection {
        min-height: 38px;
        overflow-y: visible;
    }
    
    .select2-dropdown {
        z-index: 9999;
    }
    
    .select2-results__option--selected {
        background-color: #e9f7fe !important;
        color: #0d6efd !important;
    }
    
    .select2-results__option--highlighted.select2-results__option--selectable {
        background-color: #0d6efd !important;
        color: white !important;
    }
    
    .select2-search--dropdown .select2-search__field {
        padding: 8px;
        border-radius: 4px;
    }
    
    /* 表关联区域样式优化 */
    .join-area {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        border: 1px solid #e9ecef;
    }
    
    .join-area label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 6px;
    }
    
    .join-area .badge {
        font-weight: 400;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    
    /* 列选择区域样式优化 */
    .column-selection-area {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        border: 1px solid #e9ecef;
    }
    
    .column-selection-area label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 6px;
    }
    
    /* 网格中的列项悬停效果增强 */
    .grid-column-item:hover {
        box-shadow: 0 3px 8px rgba(40, 167, 69, 0.2);
        transform: translateY(-2px);
        background-color: #e8f5f0;
    }
    
    /* 列计数徽章美化 */
    .columns-counter .badge {
        font-weight: 500;
        font-size: 0.85rem;
        padding: 0.35em 0.65em;
    }

    /* 条件区域样式优化 */
    .condition-area {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        border: 1px solid #e9ecef;
    }
    
    .condition-area label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 6px;
    }
    
    /* 表单元素统一样式 */
    .form-select-search + .select2-container--bootstrap-5 .select2-selection {
        min-height: 38px;
        overflow-y: visible;
    }

    /* 排序区域样式优化 */
    .sort-area {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        border: 1px solid #e9ecef;
    }
    
    .sort-area label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 6px;
    }
    
    /* 排序项样式 */
    .sort-item {
        background-color: #f0f4ff;
        border-left: 3px solid #6c757d !important;
        margin-bottom: 8px;
        padding: 8px 12px;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.2s ease;
    }
    
    .sort-item:hover {
        box-shadow: 0 3px 8px rgba(108, 117, 125, 0.2);
        transform: translateY(-1px);
        background-color: #e6edff;
    }
    
    /* SQL预览区域样式优化 */
    .sql-preview {
        background-color: #1e1e1e;
        color: #d4d4d4;
        border-radius: 5px;
        overflow: auto;
        max-height: 300px;
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.2);
    }
    
    .sql-preview pre {
        padding: 15px;
        margin: 0;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 0.9rem;
        white-space: pre;
        tab-size: 4;
    }

    /* 查询历史容器样式 */
    .query-history-container {
        min-height: 60px;
        max-height: 240px;
        overflow-y: auto;
        overflow-x: hidden;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 6px;
        background-color: #fafbfc;
        margin-bottom: 12px;
        position: relative;
    }

    /* 美化滚动条 */
    .query-history-container::-webkit-scrollbar {
        width: 6px;
    }

    .query-history-container::-webkit-scrollbar-track {
        background: #f1f3f4;
        border-radius: 3px;
    }

    .query-history-container::-webkit-scrollbar-thumb {
        background: #c1c8cd;
        border-radius: 3px;
        transition: background-color 0.2s;
    }

    .query-history-container::-webkit-scrollbar-thumb:hover {
        background: #a8b1b8;
    }

    /* Firefox滚动条 */
    .query-history-container {
        scrollbar-width: thin;
        scrollbar-color: #c1c8cd #f1f3f4;
    }

    /* 查询历史项样式优化 - 更紧凑 */
    .query-history-item {
        transition: all 0.2s ease;
        border: 1px solid #e9ecef;
        background-color: #ffffff;
        margin-bottom: 6px;
        border-radius: 4px;
        cursor: pointer;
        position: relative;
    }

    .query-history-item:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-color: #17a2b8;
        background-color: #f8fdff;
    }

    .query-history-item:last-child {
        margin-bottom: 0;
    }

    /* 历史记录内容样式 - 更紧凑 */
    .query-history-item .p-2 {
        padding: 6px 8px !important;
    }

    .query-history-item .small {
        font-size: 0.75rem;
        line-height: 1.2;
    }

    .query-history-item .fw-bold {
        font-size: 0.8rem;
        margin-bottom: 2px;
    }

    .query-history-item .btn-sm {
        padding: 2px 6px;
        font-size: 0.7rem;
        line-height: 1;
    }

    /* 空状态样式 */
    .query-history-container .text-muted {
        margin: 20px 0;
        font-style: italic;
        text-align: center;
    }

    /* 快捷操作面板紧凑样式 */
    .compact-btn {
        height: 58px;
        padding: 10px 8px;
        font-size: 0.75rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        border-radius: 8px;
        text-align: center;
        line-height: 1.2;
        gap: 3px;
    }

    .compact-btn i {
        font-size: 1.2rem;
        display: block;
        color: inherit;
    }

    .compact-btn .btn-label {
        font-size: 0.73rem;
        line-height: 1.1;
        font-weight: 500;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 100%;
        color: inherit;
    }

    .compact-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .compact-btn:active {
        transform: translateY(0);
    }

    /* 为不同类型的按钮添加特定的悬停效果 */
    .compact-btn.btn-outline-secondary:hover {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
    }

    .compact-btn.btn-outline-info:hover {
        background-color: #0dcaf0;
        border-color: #0dcaf0;
        color: white;
    }

    .compact-btn.btn-outline-success:hover {
        background-color: #198754;
        border-color: #198754;
        color: white;
    }

    .compact-btn.btn-outline-primary:hover {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
    }

    /* 快捷键折叠按钮样式 */
    .btn-toggle-shortcuts {
        font-size: 0.75rem;
        padding: 4px 8px;
        transition: all 0.2s ease;
    }

    .btn-toggle-shortcuts:hover {
        transform: scale(1.05);
    }

    .btn-toggle-shortcuts .toggle-icon {
        transition: transform 0.2s ease;
        margin-left: 4px;
        font-size: 0.7rem;
    }

    .btn-toggle-shortcuts[aria-expanded="true"] .toggle-icon {
        transform: rotate(180deg);
    }

    /* 紧凑的键盘快捷键样式 */
    .kbd-compact {
        font-size: 0.65rem;
        padding: 2px 4px;
        background-color: #495057;
        color: white;
        border-radius: 3px;
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
    }

    #keyboardShortcuts .row > div {
        margin-bottom: 4px;
        font-size: 0.7rem;
    }

    #keyboardShortcuts .bg-light {
        background-color: #f8f9fa !important;
        border: 1px solid #e9ecef;
    }

    /* 面板折叠按钮样式 */
    .panel-toggle-btn {
        border: none !important;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        opacity: 0.8;
    }

    .panel-toggle-btn:hover {
        opacity: 1;
        transform: scale(1.1);
        background-color: rgba(255, 255, 255, 0.2) !important;
    }

    .panel-toggle-btn:focus {
        box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);
    }

    .panel-toggle-btn i {
        transition: transform 0.3s ease;
        font-size: 0.9rem;
    }

    .panel-toggle-btn[aria-expanded="false"] i {
        transform: rotate(180deg);
    }

    /* 面板collapse动画优化 */
    .collapse {
        transition: height 0.35s ease, opacity 0.25s ease;
    }

    .collapsing {
        transition: height 0.35s ease, opacity 0.25s ease;
    }

    .collapse:not(.show) {
        opacity: 0;
    }

    .collapse.show {
        opacity: 1;
    }

    /* 全局面板控制按钮样式 */
    .global-panel-btn {
        width: 36px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        border-radius: 6px;
    }

    .global-panel-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 6px rgba(0,0,0,0.15);
    }

    .global-panel-btn:active {
        transform: translateY(0);
    }

    .global-panel-btn i {
        font-size: 0.85rem;
    }

    /* 全局面板控制条样式 */
    .global-panel-control {
        background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    /* === 第二阶段优化：前端性能提升 === */
    
    /* 硬件加速优化 */
    .card, .btn, .table {
        transform: translateZ(0);
        backface-visibility: hidden;
        perspective: 1000px;
    }

    /* 图片懒加载 */
    .lazy-load {
        loading: lazy;
    }

    /* 动画性能优化 */
    .collapse {
        will-change: height, opacity;
    }

    .btn:hover, .panel-toggle-btn:hover {
        will-change: transform;
    }

    /* 字体渲染优化 */
    body {
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        font-display: swap;
    }
</style>

<!-- 实时通信功能UI容器 -->
<div id="realtime-containers">
    <!-- 查询进度条容器 -->
    <div id="query-progress-container" style="display: none;" class="mb-3">
        <div class="card border-primary">
            <div class="card-body p-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <span class="fw-bold text-primary">
                        <i class="fas fa-cog fa-spin me-2"></i>查询执行中...
                    </span>
                    <span id="query-progress-text" class="badge bg-primary">0%</span>
                </div>
                <div class="progress mb-2" style="height: 8px;">
                    <div id="query-progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" 
                         role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                    </div>
                </div>
                <div id="query-progress-message" class="small text-muted">准备执行查询...</div>
            </div>
        </div>
    </div>

    <!-- 查询状态显示容器 -->
    <div id="query-status" class="mb-3"></div>

    <!-- 实时通知显示容器 -->
    <div id="realtime-notifications" class="position-fixed" style="top: 80px; right: 20px; z-index: 1050; max-width: 350px;">
        <!-- 实时通知将在这里显示 -->
    </div>

    <!-- 连接状态指示器 -->
    <div id="connection-status" class="position-fixed" style="bottom: 20px; right: 20px; z-index: 1040;">
        <div class="d-flex align-items-center bg-white border rounded-pill px-3 py-2 shadow-sm">
            <div id="connection-indicator" class="rounded-circle me-2" style="width: 8px; height: 8px; background-color: #6c757d;"></div>
            <span id="connection-text" class="small text-muted">Connecting...</span>
        </div>
    </div>
</div>

<!-- 顶部进度指示器 -->
<div id="progressIndicator" class="progress-indicator">
    <div class="progress-bar-animated"></div>
</div>

<!-- Toast通知容器 -->
<div id="toastContainer" class="toast-container"></div>

<!-- 顶部固定导航区域 -->
<div class="top-navbar-fixed">
    <div class="row">
        <div class="col-md-7">
            <h2><i class="fas fa-search"></i> 数据查询构建器</h2>
            <p class="lead">构建您的SQL查询，无需编写复杂的SQL语句</p>
        </div>
        <div class="col-md-5 text-end">
            <div class="btn-group">
                <button type="button" class="btn btn-primary" id="btnExecuteQuery">
                    <span class="btn-text">
                        <i class="fas fa-play"></i> 执行查询
                    </span>
                </button>
                @if (ViewBag.CanSaveQueries == true)
                {
                    <button type="button" class="btn btn-success" id="btnSaveQuery">
                        <span class="btn-text">
                            <i class="fas fa-save"></i> 保存查询
                        </span>
                    </button>
                }
                @if (ViewBag.CanExportData == true)
                {
                    <button type="button" class="btn btn-info" id="btnExportExcel" onclick="exportToExcel(); return false;">
                        <span class="btn-text">
                            <i class="fas fa-file-excel"></i> 导出Excel
                        </span>
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<!-- 主要内容区域 -->
<div class="content-below-navbar">
    <div class="row">
        <div class="col-md-4">
            <!-- 全局面板控制条 -->
            <div class="card mb-2 border-0 bg-transparent">
                <div class="card-body p-2 global-panel-control">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted mb-0 fw-500">
                            <i class="fas fa-th-list me-1"></i>面板控制
                        </small>
                        <div class="btn-group btn-group-sm">
                            <button type="button" class="btn btn-outline-primary btn-sm global-panel-btn" onclick="toggleAllPanels(true)" title="展开所有面板">
                                <i class="fas fa-expand-alt"></i>
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm global-panel-btn" onclick="toggleAllPanels(false)" title="折叠所有面板">
                                <i class="fas fa-compress-alt"></i>
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm global-panel-btn" onclick="toggleAllPanels()" title="智能切换所有面板 (Ctrl+Shift+P)">
                                <i class="fas fa-exchange-alt"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- 左侧面板: 已保存的查询和可用表格 -->
            <div class="card mb-4 saved-queries-card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0"><i class="fas fa-save"></i> 已保存的查询</h5>
                        <button class="btn btn-sm btn-outline-light panel-toggle-btn" type="button" data-target="savedQueries" data-bs-toggle="collapse" data-bs-target="#savedQueriesPanel" aria-expanded="true" aria-controls="savedQueriesPanel" title="显示/隐藏面板">
                            <i class="fas fa-chevron-up"></i>
                        </button>
                    </div>
                </div>
                <div class="collapse show" id="savedQueriesPanel">
                    <div class="card-body p-0">
                        <!-- 添加搜索框 -->
                        <div class="p-2 bg-light border-bottom">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" id="searchSavedQueries" placeholder="搜索已保存的查询...">
                                <button class="btn btn-outline-secondary" type="button" id="clearSavedQueriesSearch">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="list-group list-group-flush saved-queries-list">
                            @if (ViewBag.SavedQueries != null && ViewBag.SavedQueries.Count > 0)
                            {
                                foreach (var query in ViewBag.SavedQueries)
                                {
                                    <div class="list-group-item saved-query-item" style="cursor: pointer; transition: background-color 0.2s;">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1 query-name" data-id="@query.Id" style="color: #0d6efd; text-decoration: underline;">@query.Name</h5>
                                            <div>
                                                <small class="me-2">@query.UpdatedAt.ToString("yyyy-MM-dd")</small>
                                                <div class="btn-group btn-group-sm">
                                                    @if (ViewBag.CanShareQueries == true)
                                                    {
                                                        @* 只有当CreatedBy与当前用户名相同时才显示分享按钮 *@
                                                        @if (query.CreatedBy == User.Identity.Name)
                                                        {
                                                            <button type="button" class="btn btn-outline-primary btn-share-query" data-id="@query.Id" title="分享查询">
                                                                <i class="fas fa-share-alt"></i>
                                                            </button>
                                                        }
                                                    }
                                                    @if (query.CreatedBy == User.Identity.Name)
                                                    {
                                                        <button type="button" class="btn btn-outline-danger btn-delete-query" data-id="@query.Id" data-name="@query.Name" title="删除查询">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <p class="mb-1">@(string.IsNullOrEmpty(query.Description) ? "无描述" : query.Description)</p>
                                        <small class="text-muted">创建者: @query.CreatedBy</small>
                                        
                                        @* 显示是否是分享的查询提示信息 *@
                                        @if (query.CreatedBy != User.Identity.Name)
                                        {
                                            <div class="mt-1">
                                                <span class="badge bg-info text-white" style="font-size: 0.9em;">
                                                    <i class="fas fa-share-alt"></i> 此查询由 @(query.CreatedBy) 分享给您
                                                </span>
                                            </div>
                                        }
                                        else if (query.IsShared && ViewBag.SharedQueryUsers != null && ViewBag.SharedQueryUsers.ContainsKey(query.Id))
                                        {
                                            <div class="mt-1">
                                                <span class="badge bg-success text-white" style="font-size: 0.9em;">
                                                    <i class="fas fa-share-alt"></i> 已分享给:
                                                </span>
                                                @foreach (var sharedUser in ViewBag.SharedQueryUsers[query.Id])
                                                {
                                                    <span class="badge bg-light text-dark border me-1" style="font-size: 0.85em;">
                                                        @sharedUser
                                                    </span>
                                                }
                                            </div>
                                        }
                                        else if (query.IsShared)
                                        {
                                            <div class="mt-1">
                                                <span class="badge bg-success text-white" style="font-size: 0.9em;">
                                                    <i class="fas fa-share-alt"></i> 已分享
                                                </span>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="list-group-item text-center">
                                    <p class="mb-0">暂无保存的查询</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- 查询历史功能 -->
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-info text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0"><i class="fas fa-history"></i> 查询历史</h5>
                        <button class="btn btn-sm btn-outline-light panel-toggle-btn" type="button" data-target="queryHistory" data-bs-toggle="collapse" data-bs-target="#queryHistoryPanel" aria-expanded="true" aria-controls="queryHistoryPanel" title="显示/隐藏面板">
                            <i class="fas fa-chevron-up"></i>
                        </button>
                    </div>
                </div>
                <div class="collapse show" id="queryHistoryPanel">
                    <div class="card-body p-2">
                        <div id="recentQueries" class="query-history-container">
                            <p class="text-muted text-center mb-2">暂无查询历史</p>
                        </div>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-sm btn-outline-primary flex-fill" onclick="clearQueryHistory()" title="清空查询历史">
                                <i class="fas fa-trash-alt"></i> 清空
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary flex-fill" onclick="exportQueryHistory()" title="导出查询历史">
                                <i class="fas fa-download"></i> 导出
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 快捷操作面板 -->
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-warning text-dark">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0"><i class="fas fa-magic"></i> 快捷操作</h5>
                        <button class="btn btn-sm btn-outline-dark panel-toggle-btn" type="button" data-target="quickActions" data-bs-toggle="collapse" data-bs-target="#quickActionsPanel" aria-expanded="true" aria-controls="quickActionsPanel" title="显示/隐藏面板">
                            <i class="fas fa-chevron-up"></i>
                        </button>
                    </div>
                </div>
                <div class="collapse show" id="quickActionsPanel">
                    <div class="card-body p-2">
                        <!-- 2x2网格布局的操作按钮 -->
                        <div class="row g-2 mb-2">
                            <div class="col-6">
                                <button type="button" class="btn btn-outline-secondary btn-sm w-100 compact-btn" onclick="clearAllSelections()" title="清空所有选择">
                                    <i class="fas fa-eraser"></i>
                                    <div class="btn-label">清空选择</div>
                                </button>
                            </div>
                            <div class="col-6">
                                <button type="button" class="btn btn-outline-info btn-sm w-100 compact-btn" onclick="copyCurrentSQL()" title="复制当前SQL到剪贴板">
                                    <i class="fas fa-copy"></i>
                                    <div class="btn-label">复制SQL</div>
                                </button>
                            </div>
                            <div class="col-6">
                                <button type="button" class="btn btn-outline-success btn-sm w-100 compact-btn" onclick="saveAsTemplate()" title="保存当前查询为模板">
                                    <i class="fas fa-bookmark"></i>
                                    <div class="btn-label">保存模板</div>
                                </button>
                            </div>
                            <div class="col-6">
                                <button type="button" class="btn btn-outline-primary btn-sm w-100 compact-btn" onclick="loadSampleQuery()" title="加载示例查询">
                                    <i class="fas fa-lightbulb"></i>
                                    <div class="btn-label">示例查询</div>
                                </button>
                            </div>
                        </div>
                        
                        <!-- 可折叠的键盘快捷键提示 -->
                        <div class="text-center">
                            <button class="btn btn-sm btn-outline-secondary btn-toggle-shortcuts" type="button" data-bs-toggle="collapse" data-bs-target="#keyboardShortcuts" aria-expanded="false" title="显示/隐藏键盘快捷键">
                                <i class="fas fa-keyboard"></i> 快捷键
                                <i class="fas fa-chevron-down toggle-icon"></i>
                            </button>
                            <div class="collapse mt-2" id="keyboardShortcuts">
                                <div class="p-2 bg-light rounded small">
                                    <div class="row g-1 text-muted">
                                        <div class="col-6 d-flex justify-content-between">
                                            <span>执行查询</span>
                                            <kbd class="kbd-compact">Ctrl+?</kbd>
                                        </div>
                                        <div class="col-6 d-flex justify-content-between">
                                            <span>保存查询</span>
                                            <kbd class="kbd-compact">Ctrl+S</kbd>
                                        </div>
                                        <div class="col-6 d-flex justify-content-between">
                                            <span>导出数据</span>
                                            <kbd class="kbd-compact">Ctrl+E</kbd>
                                        </div>
                                        <div class="col-6 d-flex justify-content-between">
                                            <span>清空选择</span>
                                            <kbd class="kbd-compact">Esc</kbd>
                                        </div>
                                        <div class="col-12 d-flex justify-content-between">
                                            <span>切换面板</span>
                                            <kbd class="kbd-compact">Ctrl+Shift+P</kbd>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card available-tables-card">
                <div class="card-header bg-secondary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0"><i class="fas fa-table"></i> 可用表格和视图</h5>
                        <button class="btn btn-sm btn-outline-light panel-toggle-btn" type="button" data-target="availableTables" data-bs-toggle="collapse" data-bs-target="#availableTablesPanel" aria-expanded="true" aria-controls="availableTablesPanel" title="显示/隐藏面板">
                            <i class="fas fa-chevron-up"></i>
                        </button>
                    </div>
                </div>
                <div class="collapse show" id="availableTablesPanel">
                    <div class="card-body p-0">
                        <!-- 添加搜索框 -->
                        <div class="p-2 bg-light border-bottom">
                            <div class="input-group input-group-sm">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" id="searchAvailableTables" placeholder="搜索表格和视图...">
                                <button class="btn btn-outline-secondary" type="button" id="clearTablesSearch">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="list-group list-group-flush available-tables-list">
                            @if (ViewBag.Tables != null && ViewBag.Tables.Count > 0)
                            {
                                foreach (var table in ViewBag.Tables)
                                {
                                    var isView = table.IsView;
                                    var iconClass = isView ? "fas fa-chart-bar text-success" : "fas fa-table text-primary";
                                    var titleText = isView ? "预定义视图" : "数据表";
                                    
                                    <a href="#" class="list-group-item list-group-item-action table-item" data-name="@table.TableName" data-is-view="@isView.ToString().ToLower()">
                                        <div class="d-flex w-100 justify-content-between">
                                            <h5 class="mb-1">
                                                <i class="@iconClass me-2" title="@titleText"></i>
                                                @table.DisplayName
                                            </h5>
                                            <small><i class="fas fa-plus-circle text-success"></i></small>
                                        </div>
                                        <p class="mb-1">@(string.IsNullOrEmpty(table.Description) ? "无描述" : table.Description)</p>
                                    </a>
                                }
                            }
                            else
                            {
                                <div class="list-group-item text-center">
                                    <p class="mb-0">暂无可用表格和视图</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <!-- 右侧面板: 查询构建器 -->
            <div class="card mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0"><i class="fas fa-tools"></i> 查询构建器</h5>
                </div>
                <div class="card-body">
                    <div class="query-builder">
                        <!-- 表选择区域 -->
                        <div class="query-form-section">
                            <h5><i class="fas fa-table"></i> 选择表</h5>
                            <div class="table-selection-area">
                                <div id="selectedTables" class="mb-3">
                                    <p class="text-muted">请从左侧添加表格...</p>
                                </div>
                                <button id="btnClearTables" class="btn btn-sm btn-outline-danger" disabled>
                                    <i class="fas fa-trash"></i> 清除所有表
                                </button>
                            </div>
                        </div>

                        <!-- 表关联区域 - 新增 -->
                        <div class="query-form-section">
                            <h5><i class="fas fa-link"></i> 表关联设置</h5>
                            <div class="join-area">
                                <div class="row mb-3">
                                    <div class="col-md-4">
                                        <label for="joinType" class="form-label">连接类型</label>
                                        <select id="joinType" class="form-select" disabled>
                                            <option value="INNER">内连接 (INNER JOIN)</option>
                                            <option value="LEFT">左连接 (LEFT JOIN)</option>
                                            <option value="RIGHT">右连接 (RIGHT JOIN)</option>
                                            <option value="FULL">全连接 (FULL JOIN)</option>
                                        </select>
                                    </div>
                                    <div class="col-md-8">
                                        <label for="joinTable" class="form-label">关联表</label>
                                        <select id="joinTable" class="form-select" disabled>
                                            <option value="">-- 选择表 --</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-md-5">
                                        <label for="sourceTableField" class="form-label">主表字段</label>
                                        <select id="sourceTableField" class="form-select-fields" disabled style="width: 100%;">
                                            <option value="">-- 主表字段 --</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2 d-flex justify-content-center align-items-end" style="padding-bottom: 8px;">
                                        <span class="badge bg-secondary p-2 fs-5">=</span>
                                    </div>
                                    <div class="col-md-5">
                                        <label for="joinTableField" class="form-label">关联表字段</label>
                                        <select id="joinTableField" class="form-select-fields" disabled style="width: 100%;">
                                            <option value="">-- 关联表字段 --</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="row mb-3">
                                    <div class="col-md-12 text-end">
                                        <button id="btnAddJoin" class="btn btn-outline-primary" disabled>
                                            <i class="fas fa-plus"></i> 添加关联
                                        </button>
                                    </div>
                                </div>
                                
                                <div id="selectedJoins" class="mb-3">
                                    <p class="text-muted">暂无表关联条件...</p>
                                </div>
                                <button id="btnClearJoins" class="btn btn-sm btn-outline-danger" disabled>
                                    <i class="fas fa-trash"></i> 清除所有关联
                                </button>
                            </div>
                        </div>

                        <!-- 列选择区域 -->
                        <div class="query-form-section">
                            <h5><i class="fas fa-columns"></i> 选择列</h5>
                            <div class="column-selection-area">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="tableForColumns" class="form-label">选择表</label>
                                        <select id="tableForColumns" class="form-select" disabled>
                                            <option value="">-- 请先选择表 --</option>
                                        </select>
                                    </div>
                                    <div class="col-md-6">
                                        <label for="availableColumns" class="form-label">可用列 <small class="text-muted">(可搜索和多选)</small></label>
                                        <div class="column-select-container">
                                            <select id="availableColumns" class="form-select-columns" multiple disabled style="width: 100%;">
                                                <option value="">-- 请先选择表 --</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="selectAllColumns" disabled>
                                            <label class="form-check-label" for="selectAllColumns">
                                                选择该表的所有列
                                            </label>
                                        </div>
                                        <button id="btnAddColumns" class="btn btn-sm btn-outline-primary" disabled>
                                            <i class="fas fa-plus"></i> 添加选中的列
                                        </button>
                                    </div>
                                </div>
                                <div id="selectedColumns" class="mb-3">
                                    <p class="text-muted">请选择列...</p>
                                </div>
                                <div class="text-end">
                                    <button id="btnClearColumns" class="btn btn-sm btn-outline-danger" disabled>
                                        <i class="fas fa-trash"></i> 清除所有列
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- 条件区域 -->
                        <div class="query-form-section">
                            <h5><i class="fas fa-filter"></i> 设置条件</h5>
                            <div class="condition-area">
                                <div class="row mb-3">
                                    <div class="col-md-3">
                                        <label for="conditionColumn" class="form-label">选择列</label>
                                        <select id="conditionColumn" class="form-select-search" disabled style="width: 100%;">
                                            <option value="">-- 选择列 --</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2">
                                        <label for="conditionOperator" class="form-label">操作符</label>
                                        <select id="conditionOperator" class="form-select" disabled>
                                            <option value="=">=</option>
                                            <option value="<>">≠</option>
                                            <option value=">">></option>
                                            <option value="<"><</option>
                                            <option value=">=">≥</option>
                                            <option value="<=">≤</option>
                                            <option value="LIKE">包含</option>
                                            <option value="NOT LIKE">不包含</option>
                                            <option value="IN">在列表中</option>
                                            <option value="NOT IN">不在列表中</option>
                                            <option value="IS NULL">为空</option>
                                            <option value="IS NOT NULL">不为空</option>
                                        </select>
                                    </div>
                                    <div class="col-md-3">
                                        <label for="conditionValue" class="form-label">条件值</label>
                                        <input type="text" id="conditionValue" class="form-control" placeholder="条件值" disabled>
                                    </div>
                                    <div class="col-md-2">
                                        <label for="conditionConnector" class="form-label">连接方式</label>
                                        <select id="conditionConnector" class="form-select" disabled>
                                            <option value="AND">AND</option>
                                            <option value="OR">OR</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2 d-flex align-items-end">
                                        <div class="btn-group w-100" role="group">
                                            <button id="btnAddCondition" class="btn btn-outline-primary" disabled>
                                                <i class="fas fa-plus"></i> 添加
                                            </button>
                                            <button id="btnUpdateCondition" class="btn btn-outline-success" style="display: none;">
                                                <i class="fas fa-check"></i> 更新
                                            </button>
                                            <button id="btnCancelEdit" class="btn btn-outline-secondary" style="display: none;">
                                                <i class="fas fa-times"></i> 取消
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div id="selectedConditions" class="mb-3">
                                    <p class="text-muted">暂无查询条件...</p>
                                </div>
                                <button id="btnClearConditions" class="btn btn-sm btn-outline-danger" disabled>
                                    <i class="fas fa-trash"></i> 清除所有条件
                                </button>
                            </div>
                        </div>

                        <!-- 排序区域 -->
                        <div class="query-form-section">
                            <h5><i class="fas fa-sort"></i> 设置排序</h5>
                            <div class="sort-area">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <label for="sortColumn" class="form-label">选择排序列</label>
                                        <select id="sortColumn" class="form-select-search" disabled style="width: 100%;">
                                            <option value="">-- 选择排序列 --</option>
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="sortDirection" class="form-label">排序方向</label>
                                        <select id="sortDirection" class="form-select" disabled>
                                            <option value="ASC">升序</option>
                                            <option value="DESC">降序</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2 d-flex align-items-end">
                                        <button id="btnAddSort" class="btn btn-outline-primary w-100" disabled>
                                            <i class="fas fa-plus"></i> 添加排序
                                        </button>
                                    </div>
                                </div>
                                <div id="selectedSortOrders" class="mb-3">
                                    <p class="text-muted">无排序...</p>
                                </div>
                                <button id="btnClearSortOrders" class="btn btn-sm btn-outline-danger" disabled>
                                    <i class="fas fa-trash"></i> 清除所有排序
                                </button>
                            </div>
                        </div>

                        <!-- SQL预览 -->
                        <div class="query-form-section">
                            <h5><i class="fas fa-code"></i> SQL预览</h5>
                            <div class="sql-preview">
                                <pre id="sqlPreview">-- 您的SQL查询将显示在这里</pre>
                            </div>
                            <button id="btnCopySql" class="btn btn-sm btn-outline-secondary btn-copy-sql" disabled>
                                <i class="fas fa-copy"></i> 复制SQL
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 查询结果区域 -->
            <div class="card mt-4" id="queryResultCard" style="display: none;">
                <div class="card-header bg-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0"><i class="fas fa-table"></i> 查询结果</h5>
                        <div>
                            <span id="resultCount" class="badge bg-light text-dark me-2">0 条记录</span>
                            <span id="queryTime" class="badge bg-light text-dark">查询完成</span>
                            <!-- 第二阶段优化：结果操作工具栏 -->
                            <div class="btn-group ms-2" role="group">
                                @if (ViewBag.CanExportData == true)
                                {
                                    <button type="button" class="btn btn-sm btn-outline-light" id="btnExportPDF" onclick="exportToPDF(); return false;" title="导出为PDF">
                                        <i class="fas fa-file-pdf"></i> PDF
                                    </button>
                                }
                                <button type="button" class="btn btn-sm btn-outline-light" id="btnVisualize" onclick="showDataVisualization(); return false;" title="数据可视化">
                                    <i class="fas fa-chart-bar"></i> 图表
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-light" id="btnShowStats" onclick="showStatistics(); return false;" title="统计信息">
                                    <i class="fas fa-calculator"></i> 统计
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-light" id="btnExportTasks" onclick="showExportTaskManager(); return false;" title="导出任务管理">
                                    <i class="fas fa-tasks"></i> 任务
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- 统计信息区域 -->
                    <div class="row mb-3" id="statsArea" style="display: none;">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header bg-info text-white py-1">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0"><i class="fas fa-chart-bar"></i> 统计信息</h6>
                                        <button type="button" class="btn-close btn-close-white btn-sm" id="closeStats" aria-label="关闭"></button>
                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row" id="statsContent">
                                        <!-- 统计内容会通过JS动态生成 -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive table-sticky-header">
                        <table class="table table-striped table-hover" id="resultTable">
                            <thead></thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    
                    <!-- 统计和分页控件行 -->
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <div class="input-group input-group-sm me-2">
                                    <span class="input-group-text">每页显示</span>
                                    <select id="pageSizeSelector" class="form-select form-select-sm" style="max-width: 80px;">
                                        <option value="10">10</option>
                                        <option value="20" selected>20</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                    <span class="input-group-text">条</span>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <nav aria-label="查询结果分页">
                                <ul class="pagination pagination-sm justify-content-end" id="resultPagination">
                                    <!-- 分页内容由JS动态生成 -->
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 保存查询模态框 -->
<div class="modal fade" id="saveQueryModal" tabindex="-1" aria-labelledby="saveQueryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveQueryModalLabel">保存查询</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="saveQueryForm">
                    <input type="hidden" id="saveQueryId" value="0">
                    <div class="mb-3">
                        <label for="saveQueryName" class="form-label">查询名称</label>
                        <input type="text" class="form-control" id="saveQueryName" required placeholder="输入查询名称">
                        <div id="saveQueryNameHelp" class="form-text" style="color: #fd7e14; font-weight: bold; background-color: #fff3cd; padding: 8px; border-radius: 4px;">
                            <strong>注意：</strong>
                            1. 如果修改了查询内容，<span style="text-decoration: underline;">必须</span>修改查询名称才能保存；
                            2. 如果只修改查询名称，将创建一个新的查询；
                            3. 如果名称未变且内容未变，则更新现有查询。
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="saveQueryDescription" class="form-label">描述</label>
                        <textarea class="form-control" id="saveQueryDescription" rows="3" placeholder="输入查询描述（可选）"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" id="btnConfirmSaveQuery">保存</button>
            </div>
        </div>
    </div>
</div>

<!-- 删除查询确认模态框 -->
<div class="modal fade" id="deleteQueryModal" tabindex="-1" aria-labelledby="deleteQueryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteQueryModalLabel">确认删除</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>您确定要删除这个保存的查询吗？此操作无法撤销。</p>
                <input type="hidden" id="deleteQueryId">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-danger" id="btnConfirmDeleteQuery">删除</button>
            </div>
        </div>
    </div>
</div>

<!-- 分享查询模态框 -->
<div class="modal fade" id="shareQueryModal" tabindex="-1" aria-labelledby="shareQueryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="shareQueryModalLabel">管理查询分享</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>请选择要分享的用户或取消分享：</p>
                <div class="alert alert-info" role="alert">
                    <i class="fas fa-info-circle"></i> 勾选用户进行分享，取消勾选以停止分享。已分享的用户会自动被选中。
                </div>
                <form id="shareQueryForm">
                    <input type="hidden" id="shareQueryId" value="0">
                    <div class="mb-3">
                        <div class="input-group mb-2">
                            <input type="text" id="userSearchInput" class="form-control" placeholder="搜索用户..." aria-label="搜索用户">
                            <button class="btn btn-outline-secondary" type="button" id="clearSearchBtn" title="清除搜索"><i class="fas fa-times"></i></button>
                        </div>
                        <div class="mb-2">
                            <button type="button" class="btn btn-sm btn-outline-primary" id="selectAllUsers">全选</button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" id="deselectAllUsers">取消全选</button>
                        </div>
                        <div id="shareUsersList" class="user-checkboxes-container" style="max-height: 300px; overflow-y: auto; border: 1px solid #dee2e6; border-radius: 0.25rem; padding: 10px;">
                            <div class="text-center py-3">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">正在加载用户列表...</span>
                                </div>
                                <p class="mt-2">正在加载用户列表...</p>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                <button type="button" class="btn btn-primary" id="btnConfirmShareQuery">保存分享设置</button>
            </div>
        </div>
    </div>
</div>

<!-- 第二阶段优化：数据可视化模态框 -->
<div class="modal fade" id="dataVisualizationModal" tabindex="-1" aria-labelledby="dataVisualizationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dataVisualizationModalLabel">
                    <i class="fas fa-chart-bar"></i> 数据可视化
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                <h6 class="mb-0">图表配置</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="chartTemplateSelect" class="form-label">图表模板</label>
                                    <div class="input-group">
                                        <select id="chartTemplateSelect" class="form-select">
                                            <option value="">选择模板...</option>
                                        </select>
                                        <button type="button" class="btn btn-outline-secondary" onclick="loadChartTemplate()" title="加载选中的模板">
                                            <i class="fas fa-upload"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" onclick="deleteChartTemplate()" title="删除选中的模板">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                    <small class="text-muted">选择已保存的图表模板快速配置</small>
                                </div>
                                <div class="mb-3">
                                    <label for="chartType" class="form-label">图表类型</label>
                                    <select id="chartType" class="form-select">
                                        <option value="bar">柱状图</option>
                                        <option value="line">折线图</option>
                                        <option value="pie">饼图</option>
                                        <option value="doughnut">环形图</option>
                                        <option value="scatter">散点图</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="xAxisColumn" class="form-label">X轴（分类轴）</label>
                                    <select id="xAxisColumn" class="form-select">
                                        <option value="">请选择列</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="yAxisColumn" class="form-label">Y轴（数值轴）</label>
                                    <select id="yAxisColumn" class="form-select">
                                        <option value="">请选择列</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="aggregateFunction" class="form-label">聚合函数</label>
                                    <select id="aggregateFunction" class="form-select">
                                        <option value="count">计数 (COUNT)</option>
                                        <option value="sum">求和 (SUM)</option>
                                        <option value="avg">平均值 (AVG)</option>
                                        <option value="max">最大值 (MAX)</option>
                                        <option value="min">最小值 (MIN)</option>
                                    </select>
                                </div>
                                <div class="d-grid gap-2">
                                    <button type="button" class="btn btn-primary" onclick="generateChart()">
                                        <i class="fas fa-chart-bar"></i> 生成图表
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" onclick="exportChart()">
                                        <i class="fas fa-download"></i> 导出图表
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div class="card">
                            <div class="card-header bg-info text-white">
                                <h6 class="mb-0">图表预览</h6>
                            </div>
                            <div class="card-body">
                                <div id="chartContainer" style="position: relative; height: 400px;">
                                    <canvas id="dataChart"></canvas>
                                </div>
                                <div id="chartPlaceholder" class="text-center text-muted p-5">
                                    <i class="fas fa-chart-bar fa-3x mb-3"></i>
                                    <p>请配置图表参数并点击"生成图表"按钮</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
                <button type="button" class="btn btn-success" onclick="saveChartAsTemplate()">
                    <i class="fas fa-save"></i> 保存为模板
                </button>
            </div>
        </div>
    </div>
</div>

<!-- 第二阶段优化：导出任务管理模态框 -->
<div class="modal fade" id="exportTaskModal" tabindex="-1" aria-labelledby="exportTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportTaskModalLabel">
                    <i class="fas fa-tasks"></i> 导出任务管理
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <h6>当前导出任务</h6>
                        <div id="activeExportTasks" class="export-tasks-container">
                            <p class="text-muted">暂无进行中的导出任务</p>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <h6>导出历史</h6>
                        <div id="exportHistory" class="export-history-container" style="max-height: 300px; overflow-y: auto;">
                            <p class="text-muted">暂无导出历史</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" onclick="cancelAllExports()">
                    <i class="fas fa-stop"></i> 取消所有任务
                </button>
                <button type="button" class="btn btn-outline-secondary" onclick="clearExportHistory()">
                    <i class="fas fa-trash"></i> 清除历史
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // 全局变量
        let selectedTables = [];  // 已选择的表
        let selectedColumns = []; // 已选择的列
        let whereConditions = []; // 条件查询
        let orderByItems = [];    // 排序规则
        let allTableColumns = {}; // 所有表的列信息缓存
        let currentQuery = null;  // 当前加载的查询
        let joinConditions = []; // 新增：存储表连接条件
        let currentPage = 1;     // 当前页码
        let pageSize = 20;       // 每页显示数量
        let totalPages = 1;      // 总页数
        let originalQueryState = null; // 新增: 存储原始查询状态，用于检测是否有修改
        
        // === 现代化UI工具函数 ===
        
        // 进度指示器控制
        const ProgressIndicator = {
            show() {
                document.getElementById('progressIndicator').classList.add('active');
            },
            hide() {
                document.getElementById('progressIndicator').classList.remove('active');
            }
        };

        // 现代化Toast通知系统
        const ToastNotification = {
            show(message, type = 'info', duration = 4000) {
                const toastContainer = document.getElementById('toastContainer');
                const toastId = 'toast-' + Date.now();
                
                const toastHtml = `
                    <div id="${toastId}" class="toast toast-modern toast-${type}" role="alert">
                        <div class="toast-body d-flex align-items-center">
                            <i class="fas ${this.getIcon(type)} me-2"></i>
                            <span class="flex-grow-1">${message}</span>
                            <button type="button" class="btn-close btn-close-white ms-2" onclick="ToastNotification.hide('${toastId}')"></button>
                        </div>
                    </div>
                `;
                
                toastContainer.insertAdjacentHTML('beforeend', toastHtml);
                
                // 获取刚添加的toast元素
                const toast = document.getElementById(toastId);
                
                // 触发进入动画
                setTimeout(() => {
                    toast.classList.add('show', 'toast-enter');
                }, 10);
                
                // 移除进入动画类
                setTimeout(() => {
                    toast.classList.remove('toast-enter');
                }, 300);
                
                // 自动隐藏
                if (duration > 0) {
                    setTimeout(() => this.hide(toastId), duration);
                }
                
                return toastId;
            },
            
            hide(toastId) {
                const toast = document.getElementById(toastId);
                if (toast) {
                    // 添加退出动画
                    toast.classList.add('toast-exit');
                    toast.classList.remove('show');
                    
                    // 动画结束后移除元素
                    setTimeout(() => {
                        if (toast.parentNode) {
                            toast.remove();
                        }
                    }, 300);
                }
            },
            
            getIcon(type) {
                const icons = {
                    success: 'fa-check-circle',
                    error: 'fa-exclamation-circle',
                    warning: 'fa-exclamation-triangle',
                    info: 'fa-info-circle'
                };
                return icons[type] || icons.info;
            },
            
            success(message, duration = 4000) {
                return this.show(message, 'success', duration);
            },
            
            error(message, duration = 6000) {
                return this.show(message, 'error', duration);
            },
            
            warning(message, duration = 5000) {
                return this.show(message, 'warning', duration);
            },
            
            info(message, duration = 4000) {
                return this.show(message, 'info', duration);
            }
        };

        // 按钮加载状态管理
        const ButtonManager = {
            setLoading(buttonSelector, loadingText = '处理中...') {
                const btn = $(buttonSelector);
                const originalText = btn.find('.btn-text').html();
                
                btn.data('original-text', originalText);
                btn.addClass('btn-loading');
                btn.prop('disabled', true);
                btn.find('.btn-text').html(`
                    <span class="modern-spinner"></span>
                    ${loadingText}
                `);
            },
            
            removeLoading(buttonSelector) {
                const btn = $(buttonSelector);
                const originalText = btn.data('original-text');
                
                btn.removeClass('btn-loading');
                btn.prop('disabled', false);
                
                if (originalText) {
                    btn.find('.btn-text').html(originalText);
                }
            },
            
            setSuccess(buttonSelector, successText = '成功', duration = 2000) {
                const btn = $(buttonSelector);
                const originalText = btn.data('original-text') || btn.find('.btn-text').html();
                
                btn.removeClass('btn-loading');
                btn.addClass('btn-success');
                btn.find('.btn-text').html(`
                    <i class="fas fa-check"></i>
                    ${successText}
                `);
                
                setTimeout(() => {
                    btn.removeClass('btn-success');
                    btn.prop('disabled', false);
                    btn.find('.btn-text').html(originalText);
                }, duration);
            }
        };

        // 现代化确认对话框（需要SweetAlert2库）
        const ModernDialog = {
            confirm(options) {
                const defaultOptions = {
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#0d6efd',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    reverseButtons: true
                };
                
                return Swal.fire({...defaultOptions, ...options});
            },
            
            success(title, text = '') {
                return Swal.fire({
                    icon: 'success',
                    title: title,
                    text: text,
                    confirmButtonColor: '#28a745'
                });
            },
            
            error(title, text = '') {
                return Swal.fire({
                    icon: 'error',
                    title: title,
                    text: text,
                    confirmButtonColor: '#dc3545'
                });
            },
            
            info(title, text = '') {
                return Swal.fire({
                    icon: 'info',
                    title: title,
                    text: text,
                    confirmButtonColor: '#0d6efd'
                });
            }
        };

        // 骨架屏加载效果
        const SkeletonLoader = {
            show(containerSelector, type = 'table') {
                const container = $(containerSelector);
                let skeletonHtml = '';
                
                if (type === 'table') {
                    skeletonHtml = `
                        <table class="table table-skeleton">
                            ${Array(5).fill().map(() => `
                                <tr>
                                    ${Array(4).fill().map(() => `
                                        <td><div class="skeleton skeleton-text"></div></td>
                                    `).join('')}
                                </tr>
                            `).join('')}
                        </table>
                    `;
                } else if (type === 'buttons') {
                    skeletonHtml = Array(3).fill().map(() => 
                        '<div class="skeleton skeleton-button d-inline-block me-2"></div>'
                    ).join('');
                }
                
                container.html(skeletonHtml);
            },
            
            hide(containerSelector) {
                // 骨架屏会被实际内容替换，所以这里不需要特殊处理
            }
        };

        // 状态指示器
        const StatusIndicator = {
            create(text, type = 'loading') {
                const icons = {
                    loading: 'fa-spinner fa-spin',
                    success: 'fa-check',
                    error: 'fa-times'
                };
                
                return `
                    <span class="status-indicator status-${type}">
                        <i class="fas ${icons[type]}"></i>
                        ${text}
                    </span>
                `;
            }
        };
        
        // === 现有功能函数增强 ===
        
        // 全局UI更新函数
        function updateSelectedTablesUI() {
            const container = $('#selectedTables');
            
            if (selectedTables.length === 0) {
                container.html('<p class="text-muted">请从左侧添加表格...</p>');
                $('#btnClearTables').prop('disabled', true);
                return;
            }
            
            let html = '';
            selectedTables.forEach((tableName, index) => {
                html += `
                    <div class="selected-table-item fade-in">
                        <div>
                            <span class="fw-bold">${tableName}</span>
                        </div>
                        <button class="btn btn-sm btn-outline-danger btn-remove-table btn-action" data-index="${index}" title="移除表">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
            });
            
            container.html(html);
            $('#btnClearTables').prop('disabled', false);
            
            // 绑定删除按钮事件
            $('.btn-remove-table').on('click', function() {
                const index = $(this).data('index');
                removeTable(index);
            });
            
            // 更新JOIN相关控件
            initJoinControls();
        }
        
        function updateSelectedColumnsUI() {
            const container = $('#selectedColumns');
            
            if (selectedColumns.length === 0) {
                container.html('<p class="text-muted">请选择列...</p>');
                $('#btnClearColumns').prop('disabled', true);
                return;
            }
            
            // 添加计数器和列表标题
            let html = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0 fw-bold">已选择的列</h6>
                    <span class="badge bg-success">${selectedColumns.length} 个</span>
                </div>
                <div class="columns-grid-container">
                    <div class="columns-grid">
            `;
            
            selectedColumns.forEach((column, index) => {
                // 提取列名用于显示
                let displayName = typeof column === 'string' ? column : column.toString();
                let shortName = displayName;
                let tableName = '';
                
                // 如果是表名.列名格式，分别提取表名和列名
                if (displayName.includes('.')) {
                    const parts = displayName.split('.');
                    tableName = parts[0];
                    shortName = parts[1];
                }
                
                // 始终显示完整的表名.列名格式，确保用户能清楚知道列来自哪个表
                const finalDisplayName = tableName ? `${tableName}.${shortName}` : displayName;
                
                html += `
                    <div class="grid-column-item" title="${displayName}">
                        <div class="column-name">${finalDisplayName}</div>
                        <button class="btn btn-sm btn-outline-danger btn-remove-column" data-index="${index}" title="移除列">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
            });
            html += '</div></div>';
            
            container.html(html);
            $('#btnClearColumns').prop('disabled', false);
            
            // 绑定删除按钮事件
            $('.btn-remove-column').on('click', function() {
                const index = $(this).data('index');
                removeColumn(index);
            });
        }
        
        function updateSelectedConditionsUI() {
            const container = $('#selectedConditions');
            
            if (whereConditions.length === 0) {
                container.html('<p class="text-muted">无条件...</p>');
                $('#btnClearConditions').prop('disabled', true);
                return;
            }
            
            $('#btnClearConditions').prop('disabled', false);
            
            // 添加计数器和标题
            let html = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0 fw-bold">已添加的条件</h6>
                    <span class="badge bg-info">${whereConditions.length} 个</span>
                </div>
                <div class="condition-items">
            `;
            
            whereConditions.forEach((condition, index) => {
                // 修复：显示连接类型（除了第一个条件），从当前条件获取连接类型
                let connectorDisplay = '';
                if (index > 0) {
                    // 修复：从当前条件而不是前一个条件获取连接类型
                    const connector = condition.connector || 'AND';
                    const connectorClass = connector === 'OR' ? 'text-warning' : 'text-primary';
                    connectorDisplay = `<div class="text-center mb-1"><span class="badge bg-light ${connectorClass} fw-bold">${connector}</span></div>`;
                }
                
                html += `
                    ${connectorDisplay}
                    <div class="condition-item mb-2 p-2 border rounded d-flex justify-content-between align-items-center">
                        <div class="condition-text">
                            ${condition.display}
                        </div>
                        <div class="condition-actions">
                            <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="editCondition(${index})" title="编辑条件">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeCondition(${index})" title="删除条件">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            
            container.html(html);
        }
        
        function updateOrderByUI() {
            const container = $('#selectedSortOrders');
            
            if (orderByItems.length === 0) {
                container.html('<p class="text-muted">无排序...</p>');
                $('#btnClearSortOrders').prop('disabled', true);
                return;
            }
            
            $('#btnClearSortOrders').prop('disabled', false);
            
            // 添加计数器和标题
            let html = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0 fw-bold">已添加的排序</h6>
                    <span class="badge bg-secondary">${orderByItems.length} 个</span>
                </div>
            `;
            
            orderByItems.forEach((sort, index) => {
                // 为升序和降序添加不同的图标和样式
                const directionIcon = sort.direction === 'ASC' 
                    ? '<i class="fas fa-sort-up text-success"></i>' 
                    : '<i class="fas fa-sort-down text-danger"></i>';
                
                html += `
                    <div class="sort-item">
                        <div>
                            ${directionIcon} <span class="ms-1">${sort.display}</span>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeSort(${index})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
            });
            
            container.html(html);
        }
        
        // 更新表下拉框（用于条件和排序）
        function updateTableDropdowns() {
            // 更新条件、排序和JOIN的表下拉框
            const conditionTableSelect = $('#conditionTable');
            const sortTableSelect = $('#sortTable');
            const joinTableSelect = $('#joinTable');
            const sourceTableSelect = $('#sourceTable');
            
            // 清空并重新填充
            conditionTableSelect.empty();
            sortTableSelect.empty();
            joinTableSelect.empty();
            sourceTableSelect.empty();
            
            // 添加默认选项
            conditionTableSelect.append('<option value="">-- 请选择表 --</option>');
            sortTableSelect.append('<option value="">-- 请选择表 --</option>');
            joinTableSelect.append('<option value="">-- 请选择表 --</option>');
            sourceTableSelect.append('<option value="">-- 请选择表 --</option>');
            
            // 添加已选择的表
            selectedTables.forEach(table => {
                conditionTableSelect.append(`<option value="${table}">${table}</option>`);
                sortTableSelect.append(`<option value="${table}">${table}</option>`);
                joinTableSelect.append(`<option value="${table}">${table}</option>`);
                sourceTableSelect.append(`<option value="${table}">${table}</option>`);
            });
            
            // 如果至少有一张表被选择，启用相关控件
            const enableControls = selectedTables.length > 0;
            conditionTableSelect.prop('disabled', !enableControls);
            sortTableSelect.prop('disabled', !enableControls);
            joinTableSelect.prop('disabled', !enableControls);
            sourceTableSelect.prop('disabled', !enableControls);
            
            if (enableControls) {
                $('#btnAddJoin').prop('disabled', false);
            } else {
                $('#btnAddJoin').prop('disabled', true);
            }
        }

        // 更新列下拉框
        function updateColumnsDropdown(tableName) {
            // 填充表下拉框
            let tableDropdown = $('#tableForColumns');
            
            // 清空并重新填充
            tableDropdown.empty();
            tableDropdown.append('<option value="">-- 请选择表 --</option>');
            
            // 添加已选择的表
            selectedTables.forEach(table => {
                tableDropdown.append(`<option value="${table}">${table}</option>`);
            });
            
            // 启用下拉框
            tableDropdown.prop('disabled', false);
            
            // 如果提供了特定表名，预选它
            if (tableName) {
                tableDropdown.val(tableName);
                fetchTableColumns(tableName);
            }
            
            // 绑定选择事件
            tableDropdown.off('change').on('change', function() {
                const selectedTable = $(this).val();
                if (selectedTable) {
                    fetchTableColumns(selectedTable);
                } else {
                    $('#availableColumns').empty().prop('disabled', true);
                    $('#selectAllColumns').prop('disabled', true);
                    $('#btnAddColumns').prop('disabled', true);
                }
            });
        }

        // JS辅助函数：格式化SQL标识符 (用于预览)
        function formatSqlIdentifierJs(identifier) {
            if (typeof identifier !== 'string' || !identifier) {
                return '';
            }

            let ident = identifier.trim();

            // 如果已经是 [schema].[object] 或 [object] 格式，简单情况下直接返回
            if (ident.startsWith('[') && ident.endsWith(']')) {
                if (ident.includes('].[')) return ident; // [schema].[object]
                if (!ident.substring(1, ident.length - 2).includes('.')) return ident; // [object]
                // 如果是如 "[Table.Column]"，则移除括号继续处理
                ident = ident.substring(1, ident.length - 2);
            }
            
            // 移除核心标识符中可能存在的方括号，避免重复
            ident = ident.replace(/[\u005B\u005D]/g, ''); // Corrected regex for [ and ]

            if (ident.includes('.')) {
                const parts = ident.split('.');
                const part1 = parts[0] ? parts[0].trim() : '';
                const part2 = parts[1] ? parts[1].trim() : '';
                
                if (part1 && part2) return `[${part1}].[${part2}]`;
                if (part2) return `[${part2}]`; //  e.g. .Column -> [Column]
                if (part1) return `[${part1}]`; //  e.g. Table. -> [Table]
                return `[${ident}]`; // Fallback for odd cases like ".." or just "."
            }
            return `[${ident}]`;
        }

        // 格式化JOIN条件中的表名和字段名
        function formatJoinCondition(joinCondition) {
            if (!joinCondition) return joinCondition;
            
            // 匹配JOIN条件的模式：JOIN_TYPE JOIN table_name ON condition
            const joinPattern = /(INNER|LEFT|RIGHT|FULL)?\s*JOIN\s+([^\s]+)\s+ON\s+(.+)/i;
            const match = joinCondition.match(joinPattern);
            
            if (match) {
                const joinType = match[1] || '';
                const tableName = match[2];
                const onCondition = match[3];
                
                // 格式化表名
                const formattedTableName = formatSqlIdentifierJs(tableName);
                
                // 格式化ON条件中的字段名
                const formattedOnCondition = formatOnCondition(onCondition);
                
                // 重新组装JOIN条件
                return `${joinType} JOIN ${formattedTableName} ON ${formattedOnCondition}`.trim();
            }
            
            return joinCondition;
        }

        // 格式化ON条件中的字段名
        function formatOnCondition(onCondition) {
            if (!onCondition) return onCondition;
            
            // 匹配 table1.field1 = table2.field2 这样的条件
            const conditionPattern = /([^\s=<>!]+)\s*(=|<>|!=|>|<|>=|<=)\s*([^\s=<>!]+)/;
            const match = onCondition.match(conditionPattern);
            
            if (match) {
                const leftField = match[1].trim();
                const operator = match[2].trim();
                const rightField = match[3].trim();
                
                // 格式化左右两边的字段名
                const formattedLeftField = formatSqlIdentifierJs(leftField);
                const formattedRightField = formatSqlIdentifierJs(rightField);
                
                return `${formattedLeftField} ${operator} ${formattedRightField}`;
            }
            
            return onCondition;
        }

        // 获取当前构建的SQL查询 (用于预览)
        function getCurrentSql() {
            if (selectedTables.length === 0) { // Columns check removed, allow FROM only if no columns
                $('#sqlPreview').text('-- 请至少选择一个表以生成SQL查询');
                $('#btnCopySql').prop('disabled', true);
                return ''; // 返回空字符串或者提示信息
            }

            let sql = 'SELECT\n';
            
            if (selectedColumns.length > 0) {
                sql += selectedColumns.map(colFullName => {
                    const actualColName = (typeof colFullName === 'object' && colFullName !== null) ? colFullName.fullName : colFullName;
                    let alias = actualColName;
                    
                    // 修改：多表查询时使用表名_列名格式的别名
                    if (selectedTables.length > 1) {
                        // 多表查询时，强制使用表名_列名格式
                        if (typeof actualColName === 'string' && actualColName.includes('.')) {
                            // 如果列名包含表名，替换点号为下划线
                            alias = `[${actualColName.replace('.', '_')}]`;
                        } else {
                            // 如果列名不包含表名，假设属于第一个表
                            alias = `[${selectedTables[0]}_${actualColName}]`;
                        }
                    } else {
                        // 单表查询时，使用列名作为别名
                        if (typeof actualColName === 'string' && actualColName.includes('.')) {
                            alias = `[${actualColName.split('.').pop()}]`;
                        } else {
                            alias = `[${actualColName}]`;
                        }
                    }
                    
                    // 确保列标识符也被格式化
                    return `    ${formatSqlIdentifierJs(actualColName)} AS ${alias}`;
                }).join(',\n');
            } else {
                sql += '    *'; // 如果没有选择列，默认SELECT *
            }
            
            const mainTable = (typeof selectedTables[0] === 'object' && selectedTables[0] !== null) ? selectedTables[0].name : selectedTables[0];
            sql += '\nFROM\n    ' + formatSqlIdentifierJs(mainTable);
            
            if (joinConditions && joinConditions.length > 0) {
                // 格式化JOIN条件中的表名和字段名
                sql += '\n' + joinConditions.map(jc => {
                    // 解析JOIN条件并格式化表名和字段名
                    return formatJoinCondition(jc);
                }).join('\n');
            }
            
            if (whereConditions && whereConditions.length > 0) {
                sql += '\nWHERE\n    ';
                
                // 构建WHERE条件，使用动态连接类型
                const conditionParts = [];
                whereConditions.forEach((cond, index) => {
                    if (typeof cond === 'object' && cond !== null && cond.sql) {
                        // 假设 cond.sql 已经是正确格式化的
                        conditionParts.push(cond.sql);
                    } else if (typeof cond === 'string') {
                        // 简单的尝试格式化 "Identifier Operator Value" 结构
                        const parts = cond.match(/^([^<=>!\s]+)\s*([<=>!]+\s*|LIKE\s+|IS\s+NULL\s*|IS\s+NOT\s+NULL\s*|IN\s*|NOT\s+IN\s*|BETWEEN\s+)(.*)$/i);
                        if (parts && parts.length > 2) {
                            const identifier = parts[1];
                            const operatorAndValue = parts[2] + (parts[3] || '');
                            conditionParts.push(`${formatSqlIdentifierJs(identifier)} ${operatorAndValue.trim()}`);
                        } else {
                            conditionParts.push(cond); // 无法解析，返回原样
                        }
                    } else {
                        conditionParts.push(String(cond)); // 其他类型转为字符串
                    }
                });
                
                // 修复：使用正确的连接类型组合条件
                let whereClause = conditionParts[0] || '';
                for (let i = 1; i < conditionParts.length; i++) {
                    // 修复：从当前条件（而不是前一个条件）获取连接类型
                    const currentCondition = whereConditions[i];
                    const connector = (typeof currentCondition === 'object' && currentCondition.connector) ? currentCondition.connector : 'AND';
                    whereClause += `\n    ${connector} ${conditionParts[i]}`;
                }
                
                sql += whereClause;
            }
            
            if (orderByItems && orderByItems.length > 0) {
                sql += '\nORDER BY\n    ' + orderByItems.map(sort => {
                    let sortCol, sortDir = '';
                    if (typeof sort === 'object' && sort !== null) {
                        sortCol = sort.column;
                        sortDir = sort.direction ? ' ' + sort.direction.toUpperCase() : '';
                    } else if (typeof sort === 'string'){
                        const sortParts = sort.trim().split(/\s+/);
                        sortCol = sortParts[0];
                        if (sortParts.length > 1 && (sortParts[1].toUpperCase() === 'ASC' || sortParts[1].toUpperCase() === 'DESC')) {
                            sortDir = ' ' + sortParts[1].toUpperCase();
                        }
                    }
                    return sortCol ? `    ${formatSqlIdentifierJs(sortCol)}${sortDir}` : '' ;
                }).filter(s => s).join(',\n');
            }
            
            return sql;
        }

        // 更新SQL预览 (通常调用 getCurrentSql)
        function updateSqlPreview() {
            const sqlQuery = getCurrentSql();
            $('#sqlPreview').text(sqlQuery || '-- SQL预览将在此显示 --');
            $('#btnCopySql').prop('disabled', !sqlQuery);
            
            // 更新执行查询和保存查询按钮状态 - 只要有表就可以启用
            if (selectedTables.length > 0) {
                $('#btnExecuteQuery').prop('disabled', false);
                if ($('#btnSaveQuery').length) {
                    $('#btnSaveQuery').prop('disabled', false);
                }
            }
        }

        // 处理表格选择
        function handleTableSelect(e) {
            e.preventDefault();
            
            const tableName = $(this).data('name');
            const displayName = $(this).find('h5').text();
            
        // 检查是否已经被选择
        if (selectedTables.some(t => t === tableName)) {
                alert('该表已被选择');
                return;
            }
            
        // 添加表到选择列表 - 修改为字符串格式
        selectedTables.push(tableName);
            
            // 更新UI显示
            updateSelectedTablesUI();
            
        // 获取列信息
            fetchTableColumns(tableName);
            
        // 启用相关按钮
            $('#btnClearTables').prop('disabled', false);
        
        // 更新表和列下拉框
                updateColumnsDropdown(tableName);
        
        // 启用查询控件
        enableQueryControls();
        
        // 更新SQL预览
        updateSqlPreview();
    }

        // 删除表
        function removeTable(index) {
            // 获取要删除的表名
            const tableName = selectedTables[index];
            
            // 从已选表中移除
            selectedTables.splice(index, 1);
            
            // 更新UI
            updateSelectedTablesUI();
            
            // 如果没有表了，禁用相关控件
            if (selectedTables.length === 0) {
                $('#tableForColumns').prop('disabled', true);
                    $('#availableColumns').prop('disabled', true);
                    $('#selectAllColumns').prop('disabled', true);
                    $('#btnAddColumns').prop('disabled', true);
                $('#btnClearTables').prop('disabled', true);
                $('#btnClearColumns').prop('disabled', true);
                $('#conditionColumn').prop('disabled', true);
                $('#conditionOperator').prop('disabled', true);
                $('#conditionValue').prop('disabled', true);
                $('#btnAddCondition').prop('disabled', true);
                $('#sortColumn').prop('disabled', true);
                $('#sortDirection').prop('disabled', true);
                $('#btnAddSort').prop('disabled', true);
                } else {
                // 更新相关下拉框
                updateColumnsDropdown(selectedTables[0]);
                updateTableDropdowns();
                
                // 修复：更新条件和排序列下拉框
                updateConditionColumnDropdown();
                updateSortColumnDropdown();
            }
            
            // 更新SQL预览
            updateSqlPreview();
        }

        // 删除列
        function removeColumn(index) {
            // 从已选列中移除
            selectedColumns.splice(index, 1);
                
                // 更新UI
                updateSelectedColumnsUI();
                
            // 如果没有列了，禁用相关控件
            if (selectedColumns.length === 0) {
                $('#btnClearColumns').prop('disabled', true);
            }
                
                // 更新SQL预览
                updateSqlPreview();
        }

        // 初始化表关联相关控件
        function initJoinControls() {
            // 当添加第二个表时启用关联控件
            if (selectedTables.length >= 2) {
                $('#joinType').prop('disabled', false);
                $('#joinTable').prop('disabled', false);
                $('#sourceTableField').prop('disabled', false);
                $('#joinTableField').prop('disabled', false);
                $('#btnAddJoin').prop('disabled', false);
                $('#btnClearJoins').prop('disabled', joinConditions.length === 0);
                
                // 填充可供关联的表
                populateJoinTables();
            } else {
                $('#joinType').prop('disabled', true);
                $('#joinTable').prop('disabled', true);
                $('#sourceTableField').prop('disabled', true);
                $('#joinTableField').prop('disabled', true);
                $('#btnAddJoin').prop('disabled', true);
                $('#btnClearJoins').prop('disabled', true);
            }
        }
        
        // 填充可关联的表下拉列表
        function populateJoinTables() {
            const joinTableSelect = $('#joinTable');
            joinTableSelect.empty();
            joinTableSelect.append('<option value="">-- 选择表 --</option>');
            
            // 添加除主表外的所有表
            if (selectedTables.length > 1) {
                for (let i = 1; i < selectedTables.length; i++) {
                    const table = selectedTables[i];
                    joinTableSelect.append(`<option value="${table}">${table}</option>`);
                }
            }
            
            // 绑定事件：当关联表改变时，更新关联表字段
            joinTableSelect.off('change').on('change', function() {
                const selectedTable = $(this).val();
                updateJoinTableFields(selectedTable);
            });
            
            // 更新主表字段
            updateSourceTableFields(selectedTables[0]);
        }
        
        // 更新主表字段下拉框
        function updateSourceTableFields(tableName) {
            const sourceFieldSelect = $('#sourceTableField');
            
            // 销毁已有的Select2实例
            if (sourceFieldSelect.hasClass("select2-hidden-accessible")) {
                sourceFieldSelect.select2('destroy');
            }
            
            // 清空下拉选项
            sourceFieldSelect.empty();
            sourceFieldSelect.append('<option value="">-- 主表字段 --</option>');
            
            if (!tableName || !allTableColumns[tableName]) {
                sourceFieldSelect.prop('disabled', true);
                return;
            }
            
            // 填充主表的所有字段
            allTableColumns[tableName].forEach(column => {
                const columnName = column.columnName || column.ColumnName;
                const displayName = column.displayName || column.DisplayName || columnName;
                sourceFieldSelect.append(`<option value="${tableName}.${columnName}">${displayName}</option>`);
            });
            
            // 启用下拉框
            sourceFieldSelect.prop('disabled', false);
            
            // 初始化Select2
            sourceFieldSelect.select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: '搜索主表字段...',
                allowClear: true,
                language: {
                    noResults: function() {
                        return "没有找到匹配的字段";
                    },
                    searching: function() {
                        return "搜索中...";
                    }
                }
            });
        }
        
        // 更新关联表字段下拉框
        function updateJoinTableFields(tableName) {
            const joinFieldSelect = $('#joinTableField');
            
            // 销毁已有的Select2实例
            if (joinFieldSelect.hasClass("select2-hidden-accessible")) {
                joinFieldSelect.select2('destroy');
            }
            
            // 清空下拉选项
            joinFieldSelect.empty();
            joinFieldSelect.append('<option value="">-- 关联表字段 --</option>');
            
            if (!tableName || !allTableColumns[tableName]) {
                // 禁用下拉框
                joinFieldSelect.prop('disabled', true);
                
                // 如果选择了表但列信息不可用，尝试获取
                if (tableName) {
                    fetchTableColumns(tableName).then(() => {
                        // 获取列信息后重新更新下拉框
                        updateJoinTableFields(tableName);
                    });
                }
                return;
            }
            
            // 填充关联表的所有字段
            allTableColumns[tableName].forEach(column => {
                const columnName = column.columnName || column.ColumnName;
                const displayName = column.displayName || column.DisplayName || columnName;
                joinFieldSelect.append(`<option value="${tableName}.${columnName}">${displayName}</option>`);
            });
            
            // 启用下拉框
            joinFieldSelect.prop('disabled', false);
            
            // 初始化Select2
            joinFieldSelect.select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: '搜索关联表字段...',
                allowClear: true,
                language: {
                    noResults: function() {
                        return "没有找到匹配的字段";
                    },
                    searching: function() {
                        return "搜索中...";
                    }
                }
            });
        }

        // 添加表关联
        function addJoin() {
            const joinType = $('#joinType').val();
            const joinTable = $('#joinTable').val();
            const sourceTableField = $('#sourceTableField').val();
            const joinTableField = $('#joinTableField').val();
            
            if (!joinTable) {
                alert('请选择要关联的表');
                return;
            }
                
            if (!sourceTableField || !joinTableField) {
                alert('请选择主表字段和关联表字段');
                return;
            }
                
            // 创建JOIN条件
            const fullJoinCondition = `${joinType} JOIN ${joinTable} ON ${sourceTableField} = ${joinTableField}`;
            joinConditions.push(fullJoinCondition);
                
            // 更新UI
            updateJoinsList();
            
            // 清除选择项
            $('#sourceTableField').val(null).trigger('change');
            $('#joinTableField').val(null).trigger('change');
            
            $('#btnClearJoins').prop('disabled', false);
            
            alert('表关联添加成功');
        }
        
        // 更新表关联列表UI
        function updateJoinsList() {
            const container = $('#selectedJoins');
            
            if (joinConditions.length === 0) {
                container.html('<p class="text-muted">暂无表关联条件...</p>');
                return;
            }
            
            let html = '<div class="join-conditions-list">';
            joinConditions.forEach((condition, index) => {
                // 提取JOIN类型、表名和ON条件，以更友好的方式展示
                const joinPattern = /(INNER|LEFT|RIGHT|FULL)\s+JOIN\s+(\w+)\s+ON\s+(.+)/i;
                const matches = condition.match(joinPattern);
                
                let joinType, tableName, onCondition;
                if (matches && matches.length >= 4) {
                    joinType = matches[1];
                    tableName = matches[2];
                    onCondition = matches[3];
                } else {
                    // 如果无法解析，则展示完整条件
                    joinType = '';
                    tableName = '';
                    onCondition = condition;
                }
                
                // 根据JOIN类型显示中文描述
                let joinTypeText = '关联';
                if (joinType) {
                    switch (joinType.toUpperCase()) {
                        case 'INNER': joinTypeText = '内连接'; break;
                        case 'LEFT': joinTypeText = '左连接'; break;
                        case 'RIGHT': joinTypeText = '右连接'; break;
                        case 'FULL': joinTypeText = '全连接'; break;
                    }
                }
                
                html += `
                    <div class="join-item d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge bg-primary me-2">${joinTypeText}</span>
                            <span class="fw-bold">${tableName}</span>
                            <span class="ms-2 text-muted small">条件: ${onCondition}</span>
                        </div>
                        <button class="btn btn-sm btn-outline-danger btn-remove-join" data-index="${index}" title="删除关联">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
            });
            html += '</div>';
            
            container.html(html);
            
            // 绑定删除按钮事件
            $('.btn-remove-join').on('click', function() {
                const index = $(this).data('index');
                removeJoin(index);
            });
        }
        
        // 删除表关联
        function removeJoin(index) {
            joinConditions.splice(index, 1);
            updateJoinsList();
            $('#btnClearJoins').prop('disabled', joinConditions.length === 0);
            alert('表关联已删除');
        }
        
        // 清除所有表关联
        function clearJoins() {
            joinConditions = [];
            updateJoinsList();
            
            // 清除Select2选择
            $('#sourceTableField').val(null).trigger('change');
            $('#joinTableField').val(null).trigger('change');
            
            $('#btnClearJoins').prop('disabled', true);
            alert('所有表关联已清除');
        }

        // 添加到document ready函数中
        $(document).ready(function() {
            // 添加全局表头固定增强
            (function applyTableHeaderFixes() {
                // 强制添加表头固定样式
                $('<style>')
                    .prop('type', 'text/css')
                    .html(`
                        .table-responsive thead,
                        .table-responsive th {
                            position: -webkit-sticky !important;
                            position: sticky !important;
                            top: 0 !important;
                            z-index: 999 !important;
                            background-color: #f8f9fa !important;
                        }
                        .table-responsive.scrolling thead th {
                            box-shadow: 0 4px 6px rgba(0,0,0,.2) !important;
                        }
                    `)
                    .appendTo('head');
                
                // 对所有响应式表格添加滚动监听
                $('.table-responsive').on('scroll', function() {
                    if ($(this).scrollTop() > 3) {
                        $(this).addClass('scrolling');
                    } else {
                        $(this).removeClass('scrolling');
                    }
                });
            })();
            
            // 绑定表格选择事件
            $('.table-item').on('click', handleTableSelect);
            
            // 绑定已保存查询点击事件
            $('.query-name').on('click', function() {
                const queryId = $(this).data('id');
                loadSavedQueryById(queryId);
            });
            
            // 绑定复制SQL按钮事件
            $('#btnCopySql').on('click', function() {
                // 获取SQL文本
                const sqlText = $('#sqlPreview').text();
                
                // 创建一个临时textarea元素
                const textarea = document.createElement('textarea');
                textarea.value = sqlText;
                textarea.style.position = 'fixed';  // 避免影响页面布局
                textarea.style.opacity = '0';       // 隐藏元素
                
                // 添加到页面，选中并复制
                document.body.appendChild(textarea);
                textarea.select();
                
                try {
                    // 尝试执行复制命令
                    const successful = document.execCommand('copy');
                    if (successful) {
                        alert('SQL已复制到剪贴板');
                    } else {
                        alert('无法复制SQL，请手动选择并复制');
                    }
                } catch (err) {
                    console.error('复制失败:', err);
                    alert('复制失败，请手动选择并复制');
                } finally {
                    // 清理临时元素
                    document.body.removeChild(textarea);
                }
            });
            
            // 绑定删除查询按钮事件
            $('.btn-delete-query').on('click', function() {
                const queryId = $(this).data('id');
                const queryName = $(this).data('name');
                $('#deleteQueryId').val(queryId);
                $('#deleteQueryModal').modal('show');
            });
            
            // 绑定分享查询按钮事件
            $('.btn-share-query').on('click', function() {
                const queryId = $(this).data('id');
                $('#shareQueryId').val(queryId);
                loadUsersForSharing(queryId);
                $('#shareQueryModal').modal('show');
            });
            
            // 绑定确认删除按钮事件
            $('#btnConfirmDeleteQuery').on('click', function() {
                deleteSavedQuery();
            });
            
            // 绑定确认分享按钮事件
            $('#btnConfirmShareQuery').on('click', function() {
                shareQuery();
            });
            
            // 绑定保存查询按钮事件
            $('#btnSaveQuery').on('click', function() {
                            // 检查是否选择了表（不再要求必须选择列）
            if (selectedTables.length === 0) {
                alert('请至少选择一个表');
                return;
            }
                
                // 预填充保存对话框
                if (currentQuery) {
                    $('#saveQueryId').val(currentQuery.id);
                    $('#saveQueryName').val(currentQuery.name);
                    $('#saveQueryDescription').val(currentQuery.description);
                } else {
                    $('#saveQueryId').val(0);
                    $('#saveQueryName').val('');
                    $('#saveQueryDescription').val('');
                }
                
                // 确保记录当前查询状态，以便后续比较
                if(!originalQueryState) {
                    saveOriginalQueryState();
                }
                
                // 打开保存模态框
                $('#saveQueryModal').modal('show');
            });
            
            // 绑定确认保存查询按钮事件
            $('#btnConfirmSaveQuery').on('click', function() {
                saveQuery();
            });
            
            // 绑定执行查询按钮事件
            $('#btnExecuteQuery').on('click', function() {
                executeQuery();
            });
            
            // 绑定表连接添加按钮事件
            $('#btnAddJoin').on('click', function() {
                addJoin();
            });
            
            // 绑定清除所有表连接按钮事件
            $('#btnClearJoins').on('click', function() {
                clearJoins();
            });
            
            // 绑定清除所有表按钮事件
            $('#btnClearTables').on('click', function() {
                clearTables();
            });
            
            // 绑定清除所有列按钮事件
            $('#btnClearColumns').on('click', function() {
                clearColumns();
            });
            
            // 绑定清除所有条件按钮事件
            $('#btnClearConditions').on('click', function() {
                clearConditions();
            });
            
            // 清除排序按钮点击事件
            $('#btnClearSortOrders').on('click', function() {
                clearSorts();
            });
            
            // 注释或删除统计按钮点击事件
            // $('#btnShowStats').on('click', function() {
            //     calculateStats();
            // });
            
            // 注释或删除关闭统计按钮点击事件
            // $('#closeStats').on('click', function() {
            //     $('#statsArea').hide();
            // });
            
            // 绑定添加条件按钮事件
            $('#btnAddCondition').on('click', function() {
                addCondition();
            });
            
            // 绑定更新条件按钮事件
            $('#btnUpdateCondition').on('click', function() {
                updateCondition();
            });
            
            // 绑定取消编辑按钮事件
            $('#btnCancelEdit').on('click', function() {
                cancelEdit();
            });
            
            // 绑定添加排序按钮事件
            $('#btnAddSort').on('click', function() {
                addSort();
            });
            
            // 用户搜索过滤功能
            $('#userSearchInput').on('input', function() {
                const searchText = $(this).val().toLowerCase();
                filterUserList(searchText);
            });
            
            // 清除搜索
            $('#clearSearchBtn').on('click', function() {
                $('#userSearchInput').val('');
                filterUserList('');
            });
            
            // 全选用户
            $('#selectAllUsers').on('click', function() {
                $('#shareUsersList input:checkbox:visible').prop('checked', true);
            });
            
            // 取消全选
            $('#deselectAllUsers').on('click', function() {
                $('#shareUsersList input:checkbox:visible').prop('checked', false);
            });
            
            // 过滤用户列表的函数
            function filterUserList(searchText) {
                $('#shareUsersList .form-check').each(function() {
                    const label = $(this).find('label').text().toLowerCase();
                    if (searchText === '' || label.includes(searchText)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }
        });
        
        // 加载已保存的查询
        function loadSavedQueryById(queryId) {
            $.ajax({
                url: `/QueryBuilder/GetSavedQuery?id=${queryId}`,
                method: 'GET',
                success: function(query) {
                    console.log("加载的查询:", query);
                    
                    // 清空当前的查询状态
                    selectedTables = [];
                    selectedColumns = [];
                    whereConditions = [];
                    orderByItems = [];
                    joinConditions = [];
                    
                    // 设置当前查询
                    currentQuery = {
                        id: query.id,
                        name: query.name,
                        description: query.description
                    };
                    
                    // 添加表
                    if (query.tables && query.tables.length > 0) {
                        console.log("解析表格数据:", query.tables);
                        
                        // 尝试解析表数组（可能是JSON字符串）
                        let tables = query.tables;
                        if (typeof tables === 'string') {
                            try {
                                tables = JSON.parse(tables);
                                console.log("成功解析表格JSON:", tables);
                            } catch (e) {
                                console.error("表格JSON解析失败:", e);
                                tables = [tables]; // 如果解析失败，假设它是单个表名
                            }
                        }
                        
                        // 确保表名是字符串格式
                        selectedTables = tables.map(table => {
                            console.log("处理表格:", table);
                            return typeof table === 'object' && table !== null ? 
                                (table.name || table.Name || table.tableName || table.TableName || String(table)) : 
                                String(table);
                        });
                        
                        console.log("最终选择的表:", selectedTables);
                    }
                    
                    // 更新UI
                    updateSelectedTablesUI();
                    
                    // 添加列
                    if (query.columns && query.columns.length > 0) {
                        console.log("解析列数据:", query.columns);
                        
                        // 尝试解析列数组（可能是JSON字符串）
                        let columns = query.columns;
                        if (typeof columns === 'string') {
                            try {
                                columns = JSON.parse(columns);
                                console.log("成功解析列JSON:", columns);
                            } catch (e) {
                                console.error("列JSON解析失败:", e);
                                columns = [columns]; // 如果解析失败，假设它是单个列名
                            }
                        }
                        
                        // 确保列名是字符串格式
                        selectedColumns = columns.map(col => {
                            return typeof col === 'object' && col !== null ? 
                                (col.fullName || col.FullName || String(col)) : 
                                String(col);
                        });
                        
                        console.log("最终选择的列:", selectedColumns);
                    }
                    
                    // 更新列UI
                    updateSelectedColumnsUI();
                    
                    // 添加条件
                    if (query.whereConditions && query.whereConditions.length > 0) {
                        console.log("解析条件数据:", query.whereConditions);
                        
                        // 尝试解析条件数组（可能是JSON字符串）
                        let conditions = query.whereConditions;
                        if (typeof conditions === 'string') {
                            try {
                                conditions = JSON.parse(conditions);
                                console.log("成功解析条件JSON:", conditions);
                            } catch (e) {
                                console.error("条件JSON解析失败:", e);
                                conditions = []; // 解析失败时，使用空数组
                            }
                        }
                        
                        whereConditions = conditions.map(condition => {
                            // 修复：处理不同格式的条件数据
                            if (typeof condition === 'string') {
                                // 尝试解析JSON字符串条件
                                try {
                                    const parsedCondition = JSON.parse(condition);
                                    // 如果解析成功且是对象，返回完整对象
                                    if (typeof parsedCondition === 'object' && parsedCondition !== null) {
                                        return parsedCondition;
                                    }
                                } catch (e) {
                                    // JSON解析失败，按普通字符串处理
                                }
                                
                                // 普通字符串条件，转换为对象格式
                                return {
                                    sql: condition,
                                    display: condition,
                                    connector: 'AND' // 默认连接类型
                                };
                            } else if (typeof condition === 'object' && condition !== null) {
                                // 已经是对象格式，确保有必要的属性
                                if (!condition.connector) {
                                    condition.connector = 'AND'; // 默认连接类型
                                }
                                if (!condition.display && condition.sql) {
                                    condition.display = condition.sql;
                                }
                                return condition;
                            }
                            
                            // 其他类型，转换为对象格式
                            return {
                                sql: String(condition),
                                display: String(condition),
                                connector: 'AND'
                            };
                        });
                        
                        // 更新条件UI
                        updateSelectedConditionsUI();
                    }
                    
                    // 添加排序
                    if (query.orderBy && query.orderBy.length > 0) {
                        console.log("解析排序数据:", query.orderBy);
                        
                        // 尝试解析排序数组（可能是JSON字符串）
                        let sorts = query.orderBy;
                        if (typeof sorts === 'string') {
                            try {
                                sorts = JSON.parse(sorts);
                                console.log("成功解析排序JSON:", sorts);
                            } catch (e) {
                                console.error("排序JSON解析失败:", e);
                                sorts = []; // 解析失败时，使用空数组
                            }
                        }
                        
                        orderByItems = sorts.map(sort => {
                            // 将字符串排序转换为对象格式
                            if (typeof sort === 'string') {
                                const parts = sort.split(' ');
                                const columnName = parts[0];
                                const direction = parts.length > 1 ? parts[1] : 'ASC';
                                
                                // 获取列的短名称用于显示
                                let shortColumnName = columnName;
                                if (columnName.includes('.')) {
                                    shortColumnName = columnName.split('.').pop();
                                }
                                
                                return {
                                    column: columnName,
                                    direction: direction,
                                    display: `${shortColumnName} ${direction === 'ASC' ? '升序' : '降序'}`
                                };
                            } else if (typeof sort === 'object' && sort !== null) {
                                // 处理已有的对象格式，但可能缺少display属性
                                if (!sort.display) {
                                    let shortColumnName = sort.column;
                                    if (sort.column && sort.column.includes('.')) {
                                        shortColumnName = sort.column.split('.').pop();
                                    }
                                    sort.display = `${shortColumnName} ${sort.direction === 'ASC' ? '升序' : '降序'}`;
                                }
                                return sort;
                            }
                            return sort;
                        });
                        
                        // 更新排序UI - 添加排序列表更新函数调用
                        updateOrderByUI();
                    }
                    
                    // 添加JOIN
                    if (query.joinConditions && query.joinConditions.length > 0) {
                        console.log("解析JOIN数据:", query.joinConditions);
                        
                        // 尝试解析JOIN数组（可能是JSON字符串）
                        let joins = query.joinConditions;
                        if (typeof joins === 'string') {
                            try {
                                joins = JSON.parse(joins);
                                console.log("成功解析JOIN JSON:", joins);
                            } catch (e) {
                                console.error("JOIN JSON解析失败:", e);
                                joins = []; // 解析失败时，使用空数组
                            }
                        }
                        
                        joinConditions = joins;
                        // 更新JOIN UI
                        updateJoinsList();
                    }
                    
                    // 更新SQL预览
                    updateSqlPreview();
                    
                    // 初始化关联控件
                    initJoinControls();
                    
                    // 更新表和列下拉框
                    if (selectedTables.length > 0) {
                        updateColumnsDropdown(selectedTables[0]);
                    }
                    
                    // 启用控件
                    enableQueryControls();
                    
                    // 当查询加载时，预先填充保存对话框
                    $('#saveQueryId').val(query.id);
                    $('#saveQueryName').val(query.name);
                    $('#saveQueryDescription').val(query.description);
                    
                    // 保存原始查询状态以进行比较
                    saveOriginalQueryState();
                    },
                    error: function(xhr, status, error) {
                    console.error("加载查询失败:", status, error);
                    console.error("错误详情:", xhr.responseText);
                    let errorMessage = '加载查询失败';
                    
                    try {
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            errorMessage += ': ' + xhr.responseJSON.error;
                        } else if (xhr.responseText) {
                            // 尝试解析响应文本
                            const response = JSON.parse(xhr.responseText);
                            if (response.error) {
                                errorMessage += ': ' + response.error;
                            }
                        } else {
                            errorMessage += ': ' + error;
                        }
                    } catch (e) {
                        errorMessage += ': ' + error;
                    }
                    
                    alert(errorMessage);
                }
            });
        }
        
        // 获取表的列信息
        function fetchTableColumns(tableName) {
            if (!tableName) return Promise.resolve();
            
            // 检查缓存中是否存在该表的列信息
            if (allTableColumns[tableName]) {
                updateColumnsUI(tableName, allTableColumns[tableName]);
                return Promise.resolve(allTableColumns[tableName]);
            }
            
            // 从服务器获取列信息
            return new Promise((resolve, reject) => {
                // 显示加载状态
                const columnsSelect = $('#availableColumns');
                if (columnsSelect.hasClass("select2-hidden-accessible")) {
                    columnsSelect.select2('destroy');
                }
                columnsSelect.empty().append('<option value="">正在加载列信息...</option>').prop('disabled', true);
                
                $.ajax({
                    url: `/QueryBuilder/GetColumns?tableName=${encodeURIComponent(tableName)}`,
                    method: 'GET',
                    success: function(columns) {
                        // 缓存列信息
                        allTableColumns[tableName] = columns;
                        
                        // 更新UI
                        updateColumnsUI(tableName, columns);
                        resolve(columns);
                    },
                    error: function(xhr, status, error) {
                        console.error("获取列信息失败:", error);
                        alert('获取表列信息失败: ' + error);
                        
                        // 清空并显示错误
                        if (columnsSelect.hasClass("select2-hidden-accessible")) {
                            columnsSelect.select2('destroy');
                        }
                        columnsSelect.empty().append('<option value="">加载列失败</option>').prop('disabled', true);
                        
                        reject(error);
                    }
                });
            });
        }
        
        // 更新列选择UI
        function updateColumnsUI(tableName, columns) {
            const columnsSelect = $('#availableColumns');
            
            // 销毁已有的Select2实例
            if (columnsSelect.hasClass("select2-hidden-accessible")) {
                columnsSelect.select2('destroy');
            }
            
            // 清空下拉选项
            columnsSelect.empty();
            
            if (!columns || columns.length === 0) {
                columnsSelect.append('<option value="">-- 没有可用列 --</option>');
                columnsSelect.prop('disabled', true);
                $('#selectAllColumns').prop('disabled', true);
                $('#btnAddColumns').prop('disabled', true);
                return;
            }
            
            // 添加下拉选项
            columns.forEach(column => {
                // 字段名称可能是大写或小写命名
                const columnName = column.columnName || column.ColumnName;
                const displayName = column.displayName || column.DisplayName || columnName;
                const fullColumnName = `${tableName}.${columnName}`;
                columnsSelect.append(`<option value="${fullColumnName}" data-display="${displayName}">${displayName}</option>`);
            });
            
            // 启用相关控件
            columnsSelect.prop('disabled', false);
            $('#selectAllColumns').prop('disabled', false);
            $('#btnAddColumns').prop('disabled', false);
            
            // 初始化Select2插件
            columnsSelect.select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: '搜索或选择列...',
                allowClear: true,
                closeOnSelect: false,
                language: {
                    noResults: function() {
                        return "没有找到匹配的列";
                    },
                    searching: function() {
                        return "搜索中...";
                    }
                }
            });
            
            // 添加列按钮事件
            $('#btnAddColumns').off('click').on('click', function() {
                addSelectedColumns();
            });
            
            // 全选按钮事件
            $('#selectAllColumns').off('change').on('change', function() {
                if ($(this).is(':checked')) {
                    // 选择所有选项并触发Select2的change事件
                    columnsSelect.find('option').prop('selected', true);
                    columnsSelect.trigger('change');
                } else {
                    // 取消选择所有选项并触发Select2的change事件
                    columnsSelect.find('option').prop('selected', false);
                    columnsSelect.trigger('change');
                }
            });
            
            // 更新条件列下拉框事件
            updateConditionColumnDropdown();
            
            // 更新排序列下拉框事件
            updateSortColumnDropdown();
        }
        
        // 添加选中的列
        function addSelectedColumns() {
            // 使用Select2获取选中的选项
            const selectedValues = $('#availableColumns').val();
            
            if (!selectedValues || selectedValues.length === 0) {
                alert('请选择至少一列');
                return;
            }
            
            // 获取显示名称信息
            const selectedOptions = $('#availableColumns option:selected');
            const columnsToAdd = [];
            
            selectedOptions.each(function(index) {
                const columnFullName = $(this).val();
                const columnDisplayName = $(this).data('display') || $(this).text();
                
                // 确保不重复添加
                if (!selectedColumns.includes(columnFullName)) {
                    columnsToAdd.push({
                        fullName: columnFullName,
                        displayName: columnDisplayName
                    });
                }
            });
            
            // 添加新选中的列
            columnsToAdd.forEach(column => {
                selectedColumns.push(column.fullName);
            });
            
            // 更新UI
            updateSelectedColumnsUI();
            
            // 更新SQL预览
            updateSqlPreview();
            
            // 启用执行查询按钮 - 现在只需要选择表即可
            if (selectedTables.length > 0) {
                $('#btnExecuteQuery').prop('disabled', false);
            }
            
            // 清除Select2的选择
            $('#availableColumns').val(null).trigger('change');
        }
        
        // 更新条件列下拉框
        function updateConditionColumnDropdown() {
            const conditionColumnSelect = $('#conditionColumn');
            
            // 销毁已有的Select2实例
            if (conditionColumnSelect.hasClass("select2-hidden-accessible")) {
                conditionColumnSelect.select2('destroy');
            }
            
            // 清空并重新填充
            conditionColumnSelect.empty();
            conditionColumnSelect.append('<option value="">-- 选择列 --</option>');
            
            // 添加所有可用列
            for (const tableName in allTableColumns) {
                // 只包含当前已选择的表的列
                if (selectedTables.includes(tableName)) {
                    const columns = allTableColumns[tableName];
                    
                    columns.forEach(column => {
                        const columnName = column.columnName || column.ColumnName;
                        const fullColumnName = `${tableName}.${columnName}`;
                        const displayName = column.displayName || column.DisplayName || columnName;
                        conditionColumnSelect.append(`<option value="${fullColumnName}">${tableName}.${displayName}</option>`);
                    });
                }
            }
            
            // 启用下拉框
            conditionColumnSelect.prop('disabled', false);
            
            // 初始化Select2
            conditionColumnSelect.select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: '搜索列...',
                allowClear: true,
                language: {
                    noResults: function() {
                        return "没有找到匹配的列";
                    },
                    searching: function() {
                        return "搜索中...";
                    }
                }
            });
            
            // 绑定条件操作选择事件
            $('#conditionOperator').prop('disabled', false);
            
            // 根据操作符启用或禁用值输入框
            $('#conditionOperator').off('change').on('change', function() {
                const operator = $(this).val();
                if (operator === 'IS NULL' || operator === 'IS NOT NULL') {
                    $('#conditionValue').prop('disabled', true).val('');
                } else {
                    $('#conditionValue').prop('disabled', false);
                }
            });
            
            // 启用连接类型选择和添加条件按钮
            $('#conditionConnector').prop('disabled', false);
            $('#btnAddCondition').prop('disabled', false);
        }
        
        // 更新排序列下拉框
        function updateSortColumnDropdown() {
            const sortColumnSelect = $('#sortColumn');
            
            // 销毁已有的Select2实例
            if (sortColumnSelect.hasClass("select2-hidden-accessible")) {
                sortColumnSelect.select2('destroy');
            }
            
            // 清空并重新填充
            sortColumnSelect.empty();
            sortColumnSelect.append('<option value="">-- 选择排序列 --</option>');
            
            // 添加所有可用列
            for (const tableName in allTableColumns) {
                // 只包含当前已选择的表的列
                if (selectedTables.includes(tableName)) {
                    const columns = allTableColumns[tableName];
                    
                    columns.forEach(column => {
                        const columnName = column.columnName || column.ColumnName;
                        const fullColumnName = `${tableName}.${columnName}`;
                        const displayName = column.displayName || column.DisplayName || columnName;
                        sortColumnSelect.append(`<option value="${fullColumnName}">${tableName}.${displayName}</option>`);
                    });
                }
            }
            
            // 启用下拉框和排序方向
            sortColumnSelect.prop('disabled', false);
            $('#sortDirection').prop('disabled', false);
            $('#btnAddSort').prop('disabled', false);
            
            // 初始化Select2
            sortColumnSelect.select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: '搜索排序列...',
                allowClear: true,
                language: {
                    noResults: function() {
                        return "没有找到匹配的列";
                    },
                    searching: function() {
                        return "搜索中...";
                    }
                }
            });
        }
        
        // 删除查询条件
        function removeCondition(index) {
            if (index < 0 || index >= whereConditions.length) {
                return;
            }
            
            // 从条件列表中移除
            whereConditions.splice(index, 1);
            
            // 更新UI
            updateSelectedConditionsUI();
            
            // 更新SQL预览
            updateSqlPreview();
        }
        
        // 删除排序项
        function removeSort(index) {
            if (index < 0 || index >= orderByItems.length) {
                return;
            }
            
            // 从排序列表中移除
            orderByItems.splice(index, 1);
            
            // 更新UI
            updateOrderByUI();
            
            // 更新SQL预览
            updateSqlPreview();
        }
        
        // 删除保存的查询
        function deleteSavedQuery() {
                const queryId = $('#deleteQueryId').val();
                
                // 执行AJAX请求
                $.ajax({
                    url: `/QueryBuilder/DeleteSavedQuery?id=${queryId}`,
                    method: 'DELETE',
                    success: function(result) {
                        if (result.success) {
                            alert('查询已成功删除');
                            // 关闭模态框
                            $('#deleteQueryModal').modal('hide');
                            // 刷新页面以更新查询列表
                            location.reload();
                        } else {
                            alert('删除查询失败: ' + (result.error || '未知错误'));
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error("删除查询失败:", error);
                        alert('删除查询失败: ' + (xhr.responseJSON?.error || error));
                    }
                });
            }
            
            // 分享查询
            function shareQuery() {
                const queryId = parseInt($('#shareQueryId').val(), 10);
                const selectedUsers = Array.from($('#shareUsersList input:checked')).map(cb => cb.value);
                
                if (isNaN(queryId) || queryId <= 0) {
                    alert('查询ID无效');
                    return;
                }
                
                // 修改验证逻辑：允许空选择（取消分享）
                let confirmMessage;
                if (selectedUsers.length === 0) {
                    confirmMessage = '您没有选择任何用户，这将取消此查询的所有分享。确定要继续吗？';
                } else {
                    confirmMessage = `确定要将查询分享给 ${selectedUsers.length} 位用户吗？`;
                }
                
                if (!confirm(confirmMessage)) {
                    return;
                }
                
                // 显示加载状态
                $('#btnConfirmShareQuery').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> 处理中...');
                
                // 保存分享设置
                $.ajax({
                    url: '/QueryBuilder/ShareQuery',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        QueryId: queryId,
                        UserNames: selectedUsers
                    }),
                    success: function(result) {
                        $('#shareQueryModal').modal('hide');
                        const message = result.message || (selectedUsers.length === 0 ? '查询分享已取消' : '查询分享成功');
                        alert(message);
                        
                        // 恢复按钮状态
                        $('#btnConfirmShareQuery').prop('disabled', false).text('保存分享设置');
                    },
                    error: function(xhr) {
                        let errorMsg = '分享查询失败';
                        try {
                            const response = JSON.parse(xhr.responseText);
                            errorMsg = response.error || errorMsg;
                        } catch(e) {
                            errorMsg = `${errorMsg}: ${xhr.responseText || xhr.statusText}`;
                        }
                        
                        console.error('分享查询失败:', errorMsg);
                        alert(errorMsg);
                        
                        // 恢复按钮状态
                        $('#btnConfirmShareQuery').prop('disabled', false).text('保存分享设置');
                    }
                });
            }
        
        // 加载用户列表以进行分享
        function loadUsersForSharing(queryId) {
            // 清空用户选择容器并显示加载状态
            const userListContainer = $('#shareUsersList');
            userListContainer.html(`
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">正在加载用户列表...</span>
                    </div>
                    <p class="mt-2">正在加载用户列表...</p>
                </div>
            `);
            
            // 首先获取查询已分享的用户列表
            $.ajax({
                url: '/QueryBuilder/GetQueryShareUsers',
                method: 'GET',
                data: { queryId: queryId },
                success: function(sharedUsers) {
                    // 获取已分享用户ID列表
                    const sharedUserIds = sharedUsers.map(user => user.userId);
                    
                    // 然后获取所有可分享的用户
                    $.ajax({
                        url: '/QueryBuilder/GetUsersForSharing',
                        method: 'GET',
                        success: function(users) {
                            userListContainer.empty();
                            
                            if (users && users.length > 0) {
                                users.forEach(user => {
                                    // 使用displayName作为显示文本，userName作为值
                                    const displayText = user.displayName || user.userName;
                                    const deptText = user.department ? ` (${user.department})` : '';
                                    const isChecked = sharedUserIds.includes(user.userId) ? 'checked' : '';
                                    
                                    // 为每个用户创建一个复选框
                                    const userCheckbox = `
                                        <div class="form-check mb-2">
                                            <input class="form-check-input" type="checkbox" value="${user.userName}" 
                                                id="user-${user.userId}" ${isChecked}>
                                            <label class="form-check-label" for="user-${user.userId}">
                                                ${displayText}${deptText}
                                            </label>
                                        </div>
                                    `;
                                    
                                    userListContainer.append(userCheckbox);
                                });
                            } else {
                                userListContainer.html('<div class="alert alert-warning">没有找到可分享的用户</div>');
                            }
                        },
                        error: function(xhr) {
                            userListContainer.html(`<div class="alert alert-danger">加载用户列表失败: ${xhr.responseText}</div>`);
                            console.error('加载用户列表失败:', xhr.responseText);
                        }
                    });
                },
                error: function(xhr) {
                    userListContainer.html(`<div class="alert alert-danger">获取已分享用户失败: ${xhr.responseText}</div>`);
                    console.error('获取已分享用户失败:', xhr.responseText);
                    
                    // 失败时仍然尝试加载所有用户列表
                    loadAllUsersForSharing(userListContainer);
                }
            });
        }

        // 仅加载所有用户（当获取已分享用户失败时使用）
        function loadAllUsersForSharing(container) {
            $.ajax({
                url: '/QueryBuilder/GetUsersForSharing',
                method: 'GET',
                success: function(users) {
                    container.empty();
                    
                    if (users && users.length > 0) {
                        users.forEach(user => {
                            const displayText = user.displayName || user.userName;
                            const deptText = user.department ? ` (${user.department})` : '';
                            
                            const userCheckbox = `
                                <div class="form-check mb-2">
                                    <input class="form-check-input" type="checkbox" value="${user.userName}" 
                                        id="user-${user.userId}">
                                    <label class="form-check-label" for="user-${user.userId}">
                                        ${displayText}${deptText}
                                    </label>
                                </div>
                            `;
                            
                            container.append(userCheckbox);
                        });
                    } else {
                        container.html('<div class="alert alert-warning">没有找到可分享的用户</div>');
                    }
                },
                error: function(xhr) {
                    container.html(`<div class="alert alert-danger">加载用户列表失败: ${xhr.responseText}</div>`);
                    console.error('加载用户列表失败:', xhr.responseText);
                }
            });
        }
        
        // 保存原始查询状态，用于比较是否有修改
        function saveOriginalQueryState() {
            // 将条件对象数组转换为字符串数组
            const whereConditionsStr = whereConditions.map(cond => {
                if (typeof cond === 'object') {
                    return cond.sql || JSON.stringify(cond);
                }
                return cond;
            });
            
            // 将排序对象数组转换为字符串数组
            const orderByStr = orderByItems.map(sort => {
                if (typeof sort === 'object') {
                    return `${sort.column} ${sort.direction}`;
                }
                return sort;
            });
            
            // 创建一个新对象而不是引用
            originalQueryState = {
                Tables: [...selectedTables],
                Columns: [...selectedColumns],
                WhereConditions: [...whereConditionsStr],
                OrderBy: [...orderByStr],
                Description: currentQuery ? currentQuery.description : '',
                Name: currentQuery ? currentQuery.name : ''
            };
            
            console.log("保存原始查询状态:", originalQueryState);
        }
        
        // 检查查询是否被修改
        function isQueryModified() {
            if (!originalQueryState) return true;
            
            // 将条件对象数组转换为字符串数组
            const whereConditionsStr = whereConditions.map(cond => {
                if (typeof cond === 'object') {
                    return cond.sql || JSON.stringify(cond);
                }
                return cond;
            });
            
            // 将排序对象数组转换为字符串数组
            const orderByStr = orderByItems.map(sort => {
                if (typeof sort === 'object') {
                    return `${sort.column} ${sort.direction}`;
                }
                return sort;
            });
            
            const currentDesc = $('#saveQueryDescription').val();
            const currentName = $('#saveQueryName').val();
            
            // 比较数组长度
            if (selectedTables.length !== originalQueryState.Tables.length ||
                selectedColumns.length !== originalQueryState.Columns.length ||
                whereConditionsStr.length !== originalQueryState.WhereConditions.length ||
                orderByStr.length !== originalQueryState.OrderBy.length ||
                currentDesc !== originalQueryState.Description) {
                return true;
            }
            
            // 比较表数组内容
            for (let i = 0; i < selectedTables.length; i++) {
                if (selectedTables[i] !== originalQueryState.Tables[i]) {
                    return true;
                }
            }
            
            // 比较列数组内容
            for (let i = 0; i < selectedColumns.length; i++) {
                if (selectedColumns[i] !== originalQueryState.Columns[i]) {
                    return true;
                }
            }
            
            // 比较条件数组内容
            for (let i = 0; i < whereConditionsStr.length; i++) {
                if (whereConditionsStr[i] !== originalQueryState.WhereConditions[i]) {
                    return true;
                }
            }
            
            // 比较排序数组内容
            for (let i = 0; i < orderByStr.length; i++) {
                if (orderByStr[i] !== originalQueryState.OrderBy[i]) {
                    return true;
                }
            }
            
            return false;
        }

        // 保存查询
        function saveQuery() {
            // 获取查询名称和描述
            const queryName = $('#saveQueryName').val();
            const queryDesc = $('#saveQueryDescription').val();
            
            if (!queryName) {
                alert('请输入查询名称');
                return;
            }
            
            if (selectedTables.length === 0) {
                alert('请至少选择一个表');
                return;
            }
            
            // 检查是否修改了查询内容
            if (currentQuery && currentQuery.id > 0 && queryName === currentQuery.name && !isQueryModified()) {
                alert('未做修改，不需要保存');
                $('#saveQueryModal').modal('hide');
                return;
            }
            
            // 如果内容已修改但名称未变，则提示用户需要修改名称
            if (currentQuery && currentQuery.id > 0 && queryName === currentQuery.name && isQueryModified()) {
                alert('查询内容已修改，请修改查询名称后再保存');
                return;
            }
            
            // 将条件数组转换为字符串形式，确保保存完整的条件对象信息
            const whereConditionsStr = whereConditions.map(cond => {
                if (typeof cond === 'object') {
                    // 修复：完整保存条件对象，包括connector信息
                    return JSON.stringify(cond);
                }
                return cond;
            });
            
            // 将排序数组转换为字符串形式
            const orderByStr = orderByItems.map(sort => {
                if (typeof sort === 'object') {
                    return `${sort.column} ${sort.direction}`;
                }
                return sort;
            });
            
            // 获取当前生成的SQL查询
            const sqlQuery = getCurrentSql();
            
            // 判断是否应该创建新查询，还是更新现有查询
            let queryId = 0;
            if (currentQuery && currentQuery.id > 0) {
                // 如果查询名称没有变化，则更新查询；否则创建新查询
                if (queryName === currentQuery.name) {
                    queryId = currentQuery.id;
                } else {
                    // 名称变化，创建新查询
                    queryId = 0;
                }
            }
            
            // 准备保存数据 - 确保字段名与后端模型匹配
            const saveData = {
                Id: queryId,
                Name: queryName,
                Description: queryDesc,
                SqlQuery: sqlQuery, // 保存SQL查询字段
                Tables: selectedTables,
                Columns: selectedColumns,
                WhereConditions: whereConditionsStr, // 序列化字段值
                OrderBy: orderByStr, // 序列化字段值
                JoinConditions: joinConditions // 添加表关联条件
            };
            
            console.log("保存查询数据:", saveData);
            
            // 执行保存
            $.ajax({
                url: '/QueryBuilder/SaveQuery',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(saveData),
                success: function(result) {
                    if (result.success) {
                        // 根据是创建新查询还是更新现有查询显示不同的提示信息
                        if (queryId === 0) {
                            alert('已成功创建新查询');
                        } else {
                            alert('已成功更新现有查询');
                        }
                        $('#saveQueryModal').modal('hide');
                        
                        // 无论是新查询还是更新查询都刷新页面，确保列表更新
                        location.reload();
                    } else {
                        alert('保存查询失败: ' + (result.error || '未知错误'));
                    }
                },
                error: function(xhr, status, error) {
                    console.error("保存查询失败:", error);
                    let errorMsg = '保存查询失败';
                    
                    try {
                        // 尝试解析错误消息
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            errorMsg += ': ' + xhr.responseJSON.error;
                        } else if (xhr.responseText) {
                            try {
                                const errorObj = JSON.parse(xhr.responseText);
                                if (errorObj.error) {
                                    errorMsg += ': ' + errorObj.error;
                                }
                            } catch(e) {
                                errorMsg += ': ' + xhr.responseText;
                            }
                        } else {
                            errorMsg += ': ' + error;
                        }
                    } catch (e) {
                        errorMsg += ': ' + error;
                    }
                    
                    alert(errorMsg);
                }
            });
        }
        
        // 增强的executeQuery函数
        function executeQuery() {
            PerformanceMonitor.start('executeQuery'); // 性能监控开始
            
            if (selectedTables.length === 0) {
                alert('请先选择要查询的表');
                return;
            }
            
            // 显示进度指示器
            ProgressIndicator.show();
            
            // 设置按钮加载状态
            ButtonManager.setLoading('#btnExecuteQuery', '正在查询...');
            
            // 显示信息提示
            ToastNotification.info('正在执行查询，请稍候...');
            
            // 获取当前页码和每页数量
            const page = currentPage;
            const size = parseInt($('#pageSizeSelector').val(), 10) || pageSize;
            
            // 准备查询数据
            const queryData = {
                Tables: selectedTables,
                Columns: selectedColumns.length > 0 ? 
                    selectedColumns.map(col => (typeof col === 'object' && col !== null) ? col.fullName : col) : 
                    [], // 传递空数组，后端将自动使用所有列
                WhereConditions: whereConditions.map(cond => {
                    if (typeof cond === 'object' && cond !== null) {
                        // 将条件对象序列化为JSON字符串，包含连接类型信息
                        return JSON.stringify(cond);
                    }
                    return cond.sql || cond;
                }),
                OrderBy: orderByItems.map(item => {
                    if (typeof item === 'object' && item !== null) {
                        return `${item.column} ${item.direction}`;
                    }
                    return item;
                }),
                JoinConditions: joinConditions.map(jc => (typeof jc === 'object' && jc !== null) ? jc.fullCondition : jc),
                PageNumber: page,
                PageSize: size
            };
            
            console.log("执行查询数据:", queryData);
            
            // 执行查询
            $.ajax({
                url: '/QueryBuilder/ExecuteQuery',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(queryData),
                success: function(result) {
                    PerformanceMonitor.end('executeQuery'); // 性能监控结束
                    
                    console.log("查询结果:", result);
                    console.log("totalRows:", result.totalRows);
                    console.log("rows length:", result.rows?.length);
                    console.log("计算的记录数:", result.totalRows || result.rows?.length || 0);
                    
                    // 隐藏进度指示器
                    ProgressIndicator.hide();
                    
                    // 设置按钮成功状态
                    ButtonManager.setSuccess('#btnExecuteQuery', '查询完成');
                    
                    // 显示成功消息
                    ToastNotification.success(`查询成功！共返回 ${result.totalRows || result.rows?.length || 0} 条记录`);
                    
                    // 显示结果
                    displayQueryResults(result);
                    
                    // 添加到查询历史（在查询成功后立即添加，包含实际的记录数量）
                    const queryDataForHistory = {
                        Tables: selectedTables,
                        Columns: selectedColumns,
                        WhereConditions: whereConditions,
                        OrderBy: orderByItems,
                        recordCount: result.totalRows || result.rows?.length || 0
                    };
                    addToQueryHistory(queryDataForHistory);
                },
                error: function(xhr, status, error) {
                    console.error("执行查询失败:", error);
                    
                    // 隐藏进度指示器
                    ProgressIndicator.hide();
                    
                    // 移除按钮加载状态
                    ButtonManager.removeLoading('#btnExecuteQuery');
                    
                    let errorMsg = '执行查询失败';
                    
                    try {
                        if (xhr.responseJSON && xhr.responseJSON.error) {
                            errorMsg = xhr.responseJSON.error;
                        } else if (xhr.responseText) {
                            const errorObj = JSON.parse(xhr.responseText);
                            if (errorObj.error) {
                                errorMsg = errorObj.error;
                            }
                        } else {
                            errorMsg = error;
                        }
                    } catch (e) {
                        errorMsg = error;
                    }
                    
                    // 显示错误消息
                    ToastNotification.error(errorMsg, 6000);
                }
            });
        }
        
        // 增强的导出Excel函数
        function exportToExcel() {
            if (selectedTables.length === 0) {
                ToastNotification.error('请选择至少一张表');
                return;
            }
            
            // 设置按钮加载状态
            ButtonManager.setLoading('#btnExportExcel', '正在导出...');
            
            // 显示进度指示器
            ProgressIndicator.show();
            
            // 显示信息提示
            ToastNotification.info('正在准备导出文件，请稍候...');
            
            // 准备导出数据
            const exportData = {
                Tables: selectedTables,
                Columns: selectedColumns.map(col => (typeof col === 'object' && col !== null) ? col.fullName : col),
                WhereConditions: whereConditions.map(cond => typeof cond === 'object' && cond !== null ? cond.sql : cond),
                OrderBy: orderByItems.map(item => {
                    if (typeof item === 'object' && item !== null) {
                        return `${item.column} ${item.direction}`;
                    }
                    return item;
                }),
                JoinConditions: joinConditions.map(jc => (typeof jc === 'object' && jc !== null) ? jc.fullCondition : jc),
                QueryName: currentQuery ? currentQuery.name : selectedTables.join('_') + '_查询结果'
            };
            
            console.log("导出Excel，参数:", exportData);
            
            // 使用fetch API发起请求，以支持文件下载
            fetch('/QueryBuilder/ExportToExcel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(exportData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.error || '导出Excel失败');
                    });
                }
                return response.blob();
            })
            .then(blob => {
                // 隐藏进度指示器
                ProgressIndicator.hide();
                
                // 设置按钮成功状态
                ButtonManager.setSuccess('#btnExportExcel', '导出完成');
                
                // 创建临时URL并触发下载
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                
                // 设置文件名
                const fileName = exportData.QueryName || '查询结果';
                const dateStr = new Date().toISOString().slice(0, 10);
                a.download = `${fileName}_${dateStr}.xlsx`;
                
                document.body.appendChild(a);
                a.click();
                
                // 清理
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                console.log("Excel导出成功");
                
                // 添加到导出历史
                addExportToHistory(a.download, 'completed', `${(blob.size / 1024).toFixed(1)} KB`);
                
                // 显示成功提示
                ToastNotification.success('Excel文件导出成功！');
            })
            .catch(error => {
                console.error("导出Excel失败:", error);
                
                // 隐藏进度指示器
                ProgressIndicator.hide();
                
                // 恢复按钮状态
                ButtonManager.removeLoading('#btnExportExcel');
                
                // 显示错误提示
                ToastNotification.error('导出Excel失败: ' + error.message);
            });
        }
        
        // 增强表头固定效果的滚动监听函数
        function enhanceTableHeaderOnScroll() {
            const tableContainer = $('.table-responsive');
            
            // 监听滚动事件
            tableContainer.on('scroll', function() {
                if ($(this).scrollTop() > 5) {
                    $(this).addClass('scrolling');
                } else {
                    $(this).removeClass('scrolling');
                }
            });
        }
        
        // 显示查询结果
        function displayQueryResults(result) {
            console.log("接收到查询结果:", result);
            
            if (!result || !result.columns) {
                alert('查询结果无效：返回数据结构不完整');
                return;
            }
            
            // 构建表头
            const thead = $('#resultTable thead');
            thead.empty();

            const headerRow = $('<tr></tr>');
            // 添加序号列
            headerRow.append('<th style="width: 60px;"><span class="column-title">序号</span></th>');

            // 创建列顺序映射
            let sortedColumns = [];
            if (selectedColumns.length > 0) {
                // 如果用户选择了列，按用户选择的顺序排列
                const columnOrder = {};
                selectedColumns.forEach((col, index) => {
                    // 解析列名（可能是tableName.columnName格式）
                    const colName = typeof col === 'string' ? col.split('.').pop() : 
                                  (col.fullName ? col.fullName.split('.').pop() : col.toString());
                    columnOrder[colName] = index;
                });
                
                // 创建一个排序后的列数组
                sortedColumns = [...result.columns].sort((a, b) => {
                    // 从完整列名中提取纯列名（不含表名）
                    const aName = a.split('.').pop();
                    const bName = b.split('.').pop();
                    // 按照selectedColumns中的顺序进行排序
                    return columnOrder[aName] - columnOrder[bName];
                });
            } else {
                // 如果用户没有选择列，使用返回的列顺序
                sortedColumns = result.columns;
            }

            // 使用排序后的列创建表头
            sortedColumns.forEach(col => {
                // 修改：多表关联查询时，所有列都显示为表名.列名格式
                let displayName = col;
                
                // 检查是否为多表查询
                const isMultiTableQuery = selectedTables.length > 1;
                
                if (isMultiTableQuery) {
                    // 多表查询时，统一显示表名.列名格式
                    if (col.includes('_') && !col.includes('.')) {
                        // 如果列名包含下划线，可能是表名_列名格式，需要转换为表名.列名显示
                        const parts = col.split('_');
                        if (parts.length >= 2) {
                            const possibleTableName = parts[0];
                            const possibleColumnName = parts.slice(1).join('_');
                            
                            // 检查这个可能的表名是否在已选择的表中
                            if (selectedTables.includes(possibleTableName)) {
                                displayName = `${possibleTableName}.${possibleColumnName}`;
                            }
                        }
                    }
                    // 如果列名包含点号，保持原样
                    else if (col.includes('.')) {
                        displayName = col;
                    }
                    // 如果列名既不包含下划线也不包含点号，尝试从selectedColumns中找到对应的完整名称
                    else {
                        // 在selectedColumns中查找包含此列名的完整标识符
                        const fullColumnIdentifier = selectedColumns.find(selectedCol => {
                            if (typeof selectedCol === 'string' && selectedCol.includes('.')) {
                                const shortName = selectedCol.split('.').pop();
                                return shortName === col;
                            }
                            return false;
                        });
                        
                        if (fullColumnIdentifier) {
                            displayName = fullColumnIdentifier;
                        }
                    }
                } else {
                    // 单表查询时，保持原有逻辑
                    if (col.includes('_') && !col.includes('.')) {
                        // 检查是否是表名_列名格式（通过检查是否在已选择的表中能找到匹配的表名）
                        const parts = col.split('_');
                        if (parts.length >= 2) {
                            const possibleTableName = parts[0];
                            const possibleColumnName = parts.slice(1).join('_');
                            
                            // 检查这个可能的表名是否在已选择的表中
                            if (selectedTables.includes(possibleTableName)) {
                                displayName = `${possibleTableName}.${possibleColumnName}`;
                            }
                        }
                    }
                    // 如果列名包含点号，保持原样
                    else if (col.includes('.')) {
                        displayName = col;
                    }
                }
                
                headerRow.append(`<th><span class="column-title" title="${col}">${displayName}</span></th>`);
            });
            thead.append(headerRow);

            // 构建表体
            const tbody = $('#resultTable tbody');
            tbody.empty();

            // 处理Rows字段而不是data字段
            if (!result.rows || result.rows.length === 0) {
                // 显示空结果集消息
                tbody.append('<tr><td colspan="' + (sortedColumns.length + 1) + '" class="text-center">没有匹配的记录</td></tr>');
            } else {
                // 显示结果数据
                result.rows.forEach((row, rowIndex) => {
                    const tr = $('<tr></tr>');
                    
                    // 添加序号列
                    // 计算序号：(当前页码-1) * 每页行数 + 当前行索引 + 1
                    // 使用正确的属性名：currentPage 和 pageSize
                    const currentPageNum = result.currentPage || 1;
                    const pageSizeNum = result.pageSize || 20;
                    const rowNumber = ((currentPageNum - 1) * pageSizeNum) + rowIndex + 1;
                    tr.append(`<td style="text-align: center; font-weight: 500;">${rowNumber}</td>`);
                    
                    // 创建一个映射，把原始数据映射到列名
                    const rowData = {};
                    result.columns.forEach((col, i) => {
                        rowData[col] = row[i];
                    });
                    
                    // 按照排序后的列顺序添加数据单元格
                    sortedColumns.forEach(col => {
                        const cellValue = rowData[col] === null ? '' : rowData[col];
                        tr.append(`<td title="${cellValue}">${cellValue}</td>`);
                    });
                    
                    tbody.append(tr);
                });
            }
            
            // 更新结果计数和查询时间
            $('#resultCount').text(`${result.totalRows || 0} 条记录`);
            $('#queryTime').text(`查询完成`);
            
            // 更新分页信息
            // 使用正确的属性名
            totalPages = result.totalPages || 1;
            currentPage = result.currentPage || 1;
            pageSize = result.pageSize || 20;
            
            // 更新分页UI
            updatePagination(currentPage, totalPages, pageSize);
            
            // 显示结果卡片
            $('#queryResultCard').show();
            
            // 智能调整表格列宽
            setTimeout(function() {
                optimizeTableColumnWidths();
                // 添加滚动监听增强表头固定效果
                enhanceTableHeaderOnScroll();
                
                // 强制重绘表头，确保固定效果生效
                $('.table-responsive').scrollTop(1).scrollTop(0);
            }, 100);
        }
        
        // 添加优化表格列宽的函数
        function optimizeTableColumnWidths() {
            const table = $('#resultTable');
            const totalWidth = table.width();
            const columnCount = table.find('th').length;
            
            if (columnCount === 0) return;
            
            // 获取所有列标题
            const headers = table.find('th');
            let totalContentWidth = 0;
            
            // 计算内容的实际宽度总和（跳过序号列）
            let firstHeader = true;
            headers.each(function() {
                // 如果是序号列，跳过宽度计算
                if (firstHeader) {
                    firstHeader = false;
                    return; // continue
                }
                
                const contentWidth = $(this).find('.column-title').text().length * 8; // 估算字符宽度
                totalContentWidth += contentWidth;
                $(this).data('content-width', contentWidth);
            });
            
            // 分配列宽，确保每列至少有最小宽度
            firstHeader = true;
            headers.each(function() {
                // 序号列固定宽度
                if (firstHeader) {
                    firstHeader = false;
                    $(this).css('width', '60px');
                    return; // continue
                }
                
                const contentWidth = $(this).data('content-width');
                const ratio = contentWidth / totalContentWidth;
                let calculatedWidth = Math.max(85, ratio * (totalWidth - 60)); // 减去序号列宽度
                calculatedWidth = Math.min(calculatedWidth, 250); // 最大列宽
                
                $(this).css('width', calculatedWidth + 'px');
            });
            
            // 处理表格响应式
            $(window).on('resize', function() {
                // 延迟执行以避免频繁触发
                clearTimeout(window.resizeTimeout);
                window.resizeTimeout = setTimeout(function() {
                    optimizeTableColumnWidths();
                }, 250);
            });
        }
        
        // 更新分页控件
        function updatePagination(currentPageNum, totalPagesNum, pageSizeNum) {
            const pagination = $('#resultPagination');
            pagination.empty();
            
            // 更新全局变量
            currentPage = currentPageNum;
            totalPages = totalPagesNum;
            pageSize = pageSizeNum;
            
            // 设置每页显示数量
            $('#pageSizeSelector').val(pageSize);
            
            if (totalPages <= 1) {
                return;
            }
            
            // 添加上一页按钮
            pagination.append(`
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="上一页">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
            `);
            
            // 添加页码按钮
            const maxPages = 5; // 最多显示的页码数
            let startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));
            let endPage = Math.min(totalPages, startPage + maxPages - 1);
            
            if (endPage - startPage + 1 < maxPages) {
                startPage = Math.max(1, endPage - maxPages + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                pagination.append(`
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `);
            }
            
            // 添加下一页按钮
            pagination.append(`
                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="下一页">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            `);
        }
        
        // 使用事件委托处理分页点击事件（在初始化时只绑定一次）
        $(document).ready(function() {
            // 绑定分页点击事件
            $('#resultPagination').on('click', '.page-link', function(e) {
                e.preventDefault();
                const newPage = parseInt($(this).data('page'), 10);
                
                if (isNaN(newPage) || newPage < 1 || newPage > totalPages || newPage === currentPage) {
                    return;
                }
                
                // 更新全局变量并重新查询
                currentPage = newPage;
                executeQuery();
            });
            
            // 绑定每页显示数量变更事件
            $('#pageSizeSelector').on('change', function() {
                pageSize = parseInt($(this).val(), 10);
                currentPage = 1; // 切换每页数量时，回到第一页
                executeQuery();
            });
        });
        
        // 启用查询相关控件
        function enableQueryControls() {
            // 启用各种相关控件
            $('#joinType').prop('disabled', false);
            $('#joinTable').prop('disabled', false);
            $('#sourceTableField').prop('disabled', false);
            $('#joinTableField').prop('disabled', false);
            $('#btnAddJoin').prop('disabled', false);
            $('#btnClearJoins').prop('disabled', joinConditions.length === 0);
            $('#selectAllColumns').prop('disabled', false);
            $('#btnAddColumns').prop('disabled', false);
            $('#conditionColumn').prop('disabled', false);
            $('#conditionOperator').prop('disabled', false);
            $('#conditionValue').prop('disabled', false);
            $('#conditionConnector').prop('disabled', false); // 启用连接类型选择
            $('#btnAddCondition').prop('disabled', false);
            $('#btnUpdateCondition').prop('disabled', false);
            $('#btnCancelEdit').prop('disabled', false);
            $('#sortColumn').prop('disabled', false);
            $('#sortDirection').prop('disabled', false);
            $('#btnAddSort').prop('disabled', false);
            $('#btnClearSortOrders').prop('disabled', false);
            $('#pageSizeSelector').prop('disabled', false);
            
            // 更新SQL预览
            updateSqlPreview();
        }

        // 清除表列表
        function clearTables() {
            if (selectedTables.length === 0) {
                return;
            }
            
            if (confirm('确定要清除所有选择的表格吗？这将同时清空所有列、查询条件和排序条件')) {
                // 清空所有数据
                selectedTables = [];
                selectedColumns = [];
                whereConditions = [];
                orderByItems = [];
                joinConditions = [];
                
                // 重置当前查询对象，避免导出Excel时使用旧查询名称
                currentQuery = null;
                
                // 更新UI
                updateSelectedTablesUI();
                updateSelectedColumnsUI();
                updateSelectedConditionsUI();
                updateOrderByUI();
                updateJoinsList();
                
                // 禁用相关控件
                const columnsSelect = $('#availableColumns');
                if (columnsSelect.hasClass("select2-hidden-accessible")) {
                    columnsSelect.select2('destroy');
                }
                columnsSelect.empty().append('<option value="">-- 请先选择表 --</option>').prop('disabled', true);
                
                $('#tableForColumns').prop('disabled', true);
                $('#selectAllColumns').prop('disabled', true);
                $('#btnAddColumns').prop('disabled', true);
                $('#conditionColumn').prop('disabled', true);
                $('#conditionOperator').prop('disabled', true);
                $('#conditionValue').prop('disabled', true);
                $('#btnAddCondition').prop('disabled', true);
                $('#sortColumn').prop('disabled', true);
                $('#sortDirection').prop('disabled', true);
                $('#btnAddSort').prop('disabled', true);
                $('#joinType').prop('disabled', true);
                $('#joinTable').prop('disabled', true);
                $('#sourceTableField').prop('disabled', true);
                $('#joinTableField').prop('disabled', true);
                $('#btnAddJoin').prop('disabled', true);
                $('#btnClearJoins').prop('disabled', true);
                
                // 更新SQL预览
                updateSqlPreview();
                
                alert('所有表格已清除');
            }
        }
        
        // 清除所有列
        function clearColumns() {
            if (selectedColumns.length === 0) {
                return;
            }
            
            if (confirm('确定要清除所有已选择的列吗？')) {
                // 清空列数据
                selectedColumns = [];
                
                // 更新UI
                updateSelectedColumnsUI();
                
                // 更新SQL预览
                updateSqlPreview();
                
                alert('所有列已清除');
            }
        }
        
        // 清除所有条件
        function clearConditions() {
            if (whereConditions.length === 0) {
                return;
            }
            
            if (confirm('确定要清除所有查询条件吗？')) {
                // 清空条件数据
                whereConditions = [];
                
                // 更新UI
                updateSelectedConditionsUI();
                
                // 更新SQL预览
                updateSqlPreview();
                
                alert('所有条件已清除');
            }
        }
        
        // 清除所有排序
        function clearSorts() {
            if (orderByItems.length === 0) {
                return;
            }
            
            if (confirm('确定要清除所有排序设置吗？')) {
                // 清空排序数据
                orderByItems = [];
                
                // 更新UI
                updateOrderByUI();
                
                // 更新SQL预览
                updateSqlPreview();
                
                alert('所有排序已清除');
            }
        }

        // 添加条件
        function addCondition() {
            // 获取条件值
            const condColumn = $('#conditionColumn').val();
            const condOperator = $('#conditionOperator').val();
            const condValue = $('#conditionValue').val();
            const condConnector = $('#conditionConnector').val();
            
            // 更新验证逻辑，不再检查 condTable
            if (!condColumn || !condOperator) {
                alert('请选择列和操作符'); // 更新提示信息
                return;
            }
            
            // 需要值的操作符
            const needValueOperators = ['=', '!=', '>', '<', '>=', '<=', 'LIKE', 'IN', 'NOT IN', 'BETWEEN'];
            
            // 判断是否需要输入值
            if (needValueOperators.includes(condOperator) && !condValue && condValue !== '0') {
                alert('请输入条件值');
                return;
            }
            
            // 格式化条件
            let condition = '';
            let display = '';
            
            // 获取列的短名称用于显示
            let shortColumnName = condColumn;
            if (condColumn.includes('.')) {
                shortColumnName = condColumn.split('.').pop();
            }
            
            // 修改：对列名进行格式化，添加方括号
            const formattedColumn = formatSqlIdentifierJs(condColumn);
            
            switch (condOperator) {
                case 'IS NULL':
                    condition = `${formattedColumn} IS NULL`;
                    display = `${shortColumnName} 为空`;
                    break;
                case 'IS NOT NULL':
                    condition = `${formattedColumn} IS NOT NULL`;
                    display = `${shortColumnName} 不为空`;
                    break;
                case 'LIKE':
                    // 确保值被单引号包围，不直接在SQL中添加%
                    condition = `${formattedColumn} LIKE N'%${condValue.replace(/'/g, "''")}%'`;
                    display = `${shortColumnName} 包含 "${condValue}"`;
                    break;
                case 'IN':
                    // 处理IN操作符，值应该是逗号分隔的列表，每个值都用单引号包围
                    const inValues = condValue.split(',')
                        .map(v => `N'${v.trim().replace(/'/g, "''")}'`)
                        .join(', ');
                    condition = `${formattedColumn} IN (${inValues})`;
                    display = `${shortColumnName} 在 (${condValue}) 中`;
                    break;
                case 'NOT IN':
                    // 处理NOT IN操作符，值应该是逗号分隔的列表，每个值都用单引号包围
                    const notInValues = condValue.split(',')
                        .map(v => `N'${v.trim().replace(/'/g, "''")}'`)
                        .join(', ');
                    condition = `${formattedColumn} NOT IN (${notInValues})`;
                    display = `${shortColumnName} 不在 (${condValue}) 中`;
                    break;
                case 'BETWEEN':
                    // 处理BETWEEN操作符，值应该是两个值，用AND分隔
                    const betweenValues = condValue.split('AND').map(v => v.trim());
                    if (betweenValues.length !== 2) {
                        alert('BETWEEN操作符需要两个值，用AND分隔，例如: 10 AND 20');
                        return;
                    }
                    condition = `${formattedColumn} BETWEEN N'${betweenValues[0].replace(/'/g, "''")}' AND N'${betweenValues[1].replace(/'/g, "''")}'`;
                    display = `${shortColumnName} 在 ${betweenValues[0]} 和 ${betweenValues[1]} 之间`;
                    break;
                default:
                    // 其他操作符，包括 =, !=, >, <, >=, <=
                    // 用 N 前缀指定 Unicode 字符串，并正确处理单引号
                    condition = `${formattedColumn} ${condOperator} N'${condValue.replace(/'/g, "''")}'`;
                    display = `${shortColumnName} ${condOperator} ${condValue}`;
            }
            
            // 添加到条件数组
            whereConditions.push({
                column: condColumn,
                operator: condOperator,
                value: condValue,
                connector: condConnector, // 添加连接类型
                sql: condition,
                display: display
            });
            
            // 更新条件显示
            updateSelectedConditionsUI();
            
            // 清空输入
            $('#conditionValue').val('');
            
            // 更新SQL预览
            updateSqlPreview();
            
            // 提示用户
            alert('条件已添加');
        }
        
        // 全局变量：正在编辑的条件索引
        let editingConditionIndex = -1;
        
        // 编辑条件
        function editCondition(index) {
            if (index < 0 || index >= whereConditions.length) {
                return;
            }
            
            const condition = whereConditions[index];
            editingConditionIndex = index;
            
            // 填充编辑表单
            $('#conditionColumn').val(condition.column).trigger('change');
            $('#conditionOperator').val(condition.operator);
            $('#conditionValue').val(condition.value || '');
            $('#conditionConnector').val(condition.connector || 'AND');
            
            // 切换按钮状态
            $('#btnAddCondition').hide();
            $('#btnUpdateCondition').show();
            $('#btnCancelEdit').show();
            
            // 提示用户正在编辑
            alert('请修改条件后点击"更新"按钮');
        }
        
        // 更新条件
        function updateCondition() {
            if (editingConditionIndex < 0 || editingConditionIndex >= whereConditions.length) {
                alert('编辑状态错误');
                return;
            }
            
            // 获取条件值
            const condColumn = $('#conditionColumn').val();
            const condOperator = $('#conditionOperator').val();
            const condValue = $('#conditionValue').val();
            const condConnector = $('#conditionConnector').val();
            
            // 验证
            if (!condColumn || !condOperator) {
                alert('请选择列和操作符');
                return;
            }
            
            // 需要值的操作符
            const needValueOperators = ['=', '!=', '>', '<', '>=', '<=', 'LIKE', 'IN', 'NOT IN', 'BETWEEN'];
            
            // 判断是否需要输入值
            if (needValueOperators.includes(condOperator) && !condValue && condValue !== '0') {
                alert('请输入条件值');
                return;
            }
            
            // 重新构建条件（复用addCondition的逻辑）
            let condition = '';
            let display = '';
            
            // 获取列的短名称用于显示
            let shortColumnName = condColumn;
            if (condColumn.includes('.')) {
                shortColumnName = condColumn.split('.').pop();
            }
            
            // 修改：对列名进行格式化，添加方括号
            const formattedColumn = formatSqlIdentifierJs(condColumn);
            
            switch (condOperator) {
                case 'IS NULL':
                    condition = `${formattedColumn} IS NULL`;
                    display = `${shortColumnName} 为空`;
                    break;
                case 'IS NOT NULL':
                    condition = `${formattedColumn} IS NOT NULL`;
                    display = `${shortColumnName} 不为空`;
                    break;
                case 'LIKE':
                    condition = `${formattedColumn} LIKE N'%${condValue.replace(/'/g, "''")}%'`;
                    display = `${shortColumnName} 包含 "${condValue}"`;
                    break;
                case 'IN':
                    const inValues = condValue.split(',')
                        .map(v => `N'${v.trim().replace(/'/g, "''")}'`)
                        .join(', ');
                    condition = `${formattedColumn} IN (${inValues})`;
                    display = `${shortColumnName} 在 (${condValue}) 中`;
                    break;
                case 'NOT IN':
                    const notInValues = condValue.split(',')
                        .map(v => `N'${v.trim().replace(/'/g, "''")}'`)
                        .join(', ');
                    condition = `${formattedColumn} NOT IN (${notInValues})`;
                    display = `${shortColumnName} 不在 (${condValue}) 中`;
                    break;
                case 'BETWEEN':
                    const betweenValues = condValue.split('AND').map(v => v.trim());
                    if (betweenValues.length !== 2) {
                        alert('BETWEEN操作符需要两个值，用AND分隔，例如: 10 AND 20');
                        return;
                    }
                    condition = `${formattedColumn} BETWEEN N'${betweenValues[0].replace(/'/g, "''")}' AND N'${betweenValues[1].replace(/'/g, "''")}'`;
                    display = `${shortColumnName} 在 ${betweenValues[0]} 和 ${betweenValues[1]} 之间`;
                    break;
                default:
                    condition = `${formattedColumn} ${condOperator} N'${condValue.replace(/'/g, "''")}'`;
                    display = `${shortColumnName} ${condOperator} ${condValue}`;
            }
            
            // 更新条件对象
            whereConditions[editingConditionIndex] = {
                column: condColumn,
                operator: condOperator,
                value: condValue,
                connector: condConnector,
                sql: condition,
                display: display
            };
            
            // 取消编辑状态
            cancelEdit();
            
            // 更新UI
            updateSelectedConditionsUI();
            updateSqlPreview();
            
            alert('条件已更新');
        }
        
        // 取消编辑
        function cancelEdit() {
            editingConditionIndex = -1;
            
            // 恢复按钮状态
            $('#btnAddCondition').show();
            $('#btnUpdateCondition').hide();
            $('#btnCancelEdit').hide();
            
            // 清空表单
            $('#conditionColumn').val('').trigger('change');
            $('#conditionOperator').val('=');
            $('#conditionValue').val('');
            $('#conditionConnector').val('AND');
        }
        
        // 添加排序
        function addSort() {
            // 获取排序值
            // const sortTable = $('#sortTable').val(); // 移除对不存在的表选择的依赖
            const sortColumn = $('#sortColumn').val();
            const sortDirection = $('#sortDirection').val();
            
            // 更新验证逻辑，不再检查 sortTable
            if (!sortColumn || !sortDirection) {
                alert('请选择列和排序方向'); // 更新提示信息
                return;
            }
            
            // 检查是否已经存在相同的排序规则
            const existingIndex = orderByItems.findIndex(s => 
                (typeof s === 'object' && s.column === sortColumn) || 
                s === `${sortColumn} ${sortDirection}`
            );
            
            if (existingIndex >= 0) {
                alert('该排序规则已存在');
                return;
            }
            
            // 获取列的短名称用于显示
            let shortColumnName = sortColumn;
            if (sortColumn.includes('.')) {
                shortColumnName = sortColumn.split('.').pop();
            }
            
            // 添加到排序数组
            orderByItems.push({
                column: sortColumn,
                direction: sortDirection,
                display: `${shortColumnName} ${sortDirection === 'ASC' ? '升序' : '降序'}`
            });
            
            // 更新排序显示
            updateOrderByUI();
            
            // 更新SQL预览
            updateSqlPreview();
            
            // 提示用户
            alert('排序规则已添加');
        }

        // 实现已保存查询的搜索过滤功能
        $('#searchSavedQueries').on('input', debounce(function() {
            const searchTerm = $(this).val().toLowerCase();
            $('.saved-query-item').each(function() {
                const queryName = $(this).find('.query-name').text().toLowerCase();
                const description = $(this).find('p').text().toLowerCase();
                
                if (queryName.includes(searchTerm) || description.includes(searchTerm)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        }, 300));

        // 清除已保存查询的搜索
        $('#clearSavedQueriesSearch').on('click', function() {
            $('#searchSavedQueries').val('');
            $('.saved-query-item').show();
        });

        // 可用表格和视图的搜索过滤
        $('#searchAvailableTables').on('input', debounce(function() {
            const searchTerm = $(this).val().toLowerCase();
            $('.table-item').each(function() {
                const tableName = $(this).find('h5').text().toLowerCase();
                const description = $(this).find('p').text().toLowerCase();
                
                if (tableName.includes(searchTerm) || description.includes(searchTerm)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        }, 300));

        // 清除可用表格和视图的搜索
        $('#clearTablesSearch').on('click', function() {
            $('#searchAvailableTables').val('');
            $('.table-item').show();
        });

        // 从可用列添加到选中列
        function addSelectedColumnsToQuery() {
            // 获取选中的列
            const selectedOptions = $('#availableColumns option:selected');
            
            if (selectedOptions.length === 0) {
                alert('请选择至少一列');
                return;
            }
            
            const selectedTable = $('#tableForColumns').val();
            
            selectedOptions.each(function() {
                const columnName = $(this).val();
                const displayName = $(this).text();
                const fullColumnName = `${selectedTable}.${columnName}`;
                
                // 检查是否已经存在
                if (!selectedColumns.includes(fullColumnName)) {
                    selectedColumns.push(fullColumnName);
                }
            });
            
            // 取消选中所有选项
            $('#availableColumns option').prop('selected', false);
            
            // 更新UI
            updateSelectedColumnsUI();
            
            // 更新SQL预览
            updateSqlPreview();
        }

        // 添加一个更新排序UI的函数
// 这个函数已在前面定义，此处删除重复定义

        // === 查询历史管理功能 ===
        
        // 查询历史存储
        let queryHistory = JSON.parse(localStorage.getItem('queryHistory') || '[]');
        
        // 添加查询到历史记录
        function addToQueryHistory(queryData) {
            const historyItem = {
                id: Date.now(),
                timestamp: new Date().toISOString(),
                tables: [...queryData.Tables],
                columns: [...queryData.Columns],
                conditions: [...queryData.WhereConditions],
                orderBy: [...queryData.OrderBy],
                sql: getCurrentSql(),
                recordCount: queryData.recordCount || 0
            };
            
            // 避免重复添加相同的查询
            const isDuplicate = queryHistory.some(item => 
                JSON.stringify(item.sql) === JSON.stringify(historyItem.sql)
            );
            
            if (!isDuplicate) {
                queryHistory.unshift(historyItem);
                
                // 限制历史记录数量（最多保存20条）
                if (queryHistory.length > 20) {
                    queryHistory = queryHistory.slice(0, 20);
                }
                
                // 保存到localStorage
                localStorage.setItem('queryHistory', JSON.stringify(queryHistory));
                
                // 更新UI
                updateQueryHistoryUI();
            }
        }
        
        // 更新查询历史UI
        function updateQueryHistoryUI() {
            const container = $('#recentQueries');
            
            if (queryHistory.length === 0) {
                container.html('<p class="text-muted text-center mb-2">暂无查询历史</p>');
                return;
            }
            
            let html = '';
            queryHistory.slice(0, 10).forEach((item, index) => {
                const timeAgo = getTimeAgo(new Date(item.timestamp));
                const tableNames = item.tables.join(', ');
                
                html += `
                    <div class="query-history-item p-2 mb-2 border rounded cursor-pointer" 
                         onclick="loadQueryFromHistory(${item.id})" 
                         title="点击加载此查询">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <div class="small fw-bold text-primary">${tableNames}</div>
                                <div class="small text-muted">${timeAgo}</div>
                                ${item.recordCount > 0 ? `<div class="small text-success">${item.recordCount} 条记录</div>` : ''}
                            </div>
                            <button class="btn btn-sm btn-outline-danger" onclick="removeFromHistory(${item.id}); event.stopPropagation();" title="删除">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                `;
            });
            
            container.html(html);
        }
        
        // 从历史记录加载查询
        function loadQueryFromHistory(historyId) {
            const historyItem = queryHistory.find(item => item.id === historyId);
            if (!historyItem) return;
            
            // 清空当前选择
            clearAllSelections();
            
            // 加载历史查询数据
            selectedTables = [...historyItem.tables];
            selectedColumns = [...historyItem.columns];
            whereConditions = [...historyItem.conditions];
            orderByItems = [...historyItem.orderBy];
            
            // 更新UI
            updateSelectedTablesUI();
            updateSelectedColumnsUI();
            updateConditionsUI();
            updateSortUI();
            updateSqlPreview();
            
            ToastNotification.success('已加载历史查询');
        }
        
        // 从历史记录中删除项目
        function removeFromHistory(historyId) {
            queryHistory = queryHistory.filter(item => item.id !== historyId);
            localStorage.setItem('queryHistory', JSON.stringify(queryHistory));
            updateQueryHistoryUI();
            ToastNotification.info('已删除历史记录');
        }
        
        // 清空查询历史
        function clearQueryHistory() {
            ModernDialog.confirm({
                title: '确认清空',
                text: '确定要清空所有查询历史吗？此操作不可撤销。',
                icon: 'warning'
            }).then((result) => {
                if (result.isConfirmed) {
                    queryHistory = [];
                    localStorage.removeItem('queryHistory');
                    updateQueryHistoryUI();
                    ToastNotification.success('查询历史已清空');
                }
            });
        }
        
        // 导出查询历史
        function exportQueryHistory() {
            if (queryHistory.length === 0) {
                ToastNotification.warning('暂无查询历史可导出');
                return;
            }
            
            const exportData = queryHistory.map(item => ({
                时间: new Date(item.timestamp).toLocaleString(),
                表名: item.tables.join(', '),
                列数: item.columns.length,
                条件数: item.conditions.length,
                记录数: item.recordCount,
                SQL: item.sql
            }));
            
            const csv = convertToCSV(exportData);
            downloadCSV(csv, `查询历史_${new Date().toISOString().slice(0, 10)}.csv`);
            ToastNotification.success('查询历史已导出');
        }
        
        // === 快捷操作功能 ===
        
        // 清空所有选择
        function clearAllSelections() {
            selectedTables = [];
            selectedColumns = [];
            whereConditions = [];
            orderByItems = [];
            joinConditions = [];
            
            // 重置当前查询对象
            currentQuery = null;
            
            // 禁用并重置列选择相关控件
            const columnsSelect = $('#availableColumns');
            if (columnsSelect.hasClass("select2-hidden-accessible")) {
                columnsSelect.select2('destroy');
            }
            columnsSelect.empty().append('<option value="">-- 请先选择表 --</option>').prop('disabled', true);
            
            $('#tableForColumns').empty().append('<option value="">-- 请先选择表 --</option>').prop('disabled', true);
            $('#selectAllColumns').prop('disabled', true);
            $('#btnAddColumns').prop('disabled', true);
            $('#btnClearColumns').prop('disabled', true);
            
            // 禁用条件和排序相关控件
            $('#conditionColumn').prop('disabled', true);
            $('#conditionOperator').prop('disabled', true);
            $('#conditionValue').prop('disabled', true);
            $('#btnAddCondition').prop('disabled', true);
            $('#sortColumn').prop('disabled', true);
            $('#sortDirection').prop('disabled', true);
            $('#btnAddSort').prop('disabled', true);
            
            // 更新UI
            updateSelectedTablesUI();
            updateSelectedColumnsUI();
            updateSelectedConditionsUI();
            updateOrderByUI();
            updateJoinsList();
            updateSqlPreview();
            
            ToastNotification.success('已清空所有选择');
        }
        
        // 复制当前SQL
        function copyCurrentSQL() {
            const sql = getCurrentSql();
            if (!sql) {
                ToastNotification.warning('当前没有生成SQL语句');
                return;
            }
            
            navigator.clipboard.writeText(sql).then(() => {
                ToastNotification.success('SQL已复制到剪贴板');
            }).catch(() => {
                // 降级方案
                const textArea = document.createElement('textarea');
                textArea.value = sql;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                ToastNotification.success('SQL已复制到剪贴板');
            });
        }
        
        // 保存为模板
        function saveAsTemplate() {
            if (selectedTables.length === 0) {
                ToastNotification.error('请先选择表格');
                return;
            }
            
            const templateName = prompt('请输入模板名称：');
            if (!templateName) return;
            
            const template = {
                name: templateName,
                tables: [...selectedTables],
                columns: [...selectedColumns],
                conditions: [...whereConditions],
                orderBy: [...orderByItems],
                joins: [...joinConditions],
                createdAt: new Date().toISOString()
            };
            
            let templates = JSON.parse(localStorage.getItem('queryTemplates') || '[]');
            templates.push(template);
            localStorage.setItem('queryTemplates', JSON.stringify(templates));
            
            ToastNotification.success(`模板"${templateName}"已保存`);
        }
        
        // 加载示例查询
        function loadSampleQuery() {
            if (selectedTables.length > 0) {
                ModernDialog.confirm({
                    title: '加载示例查询',
                    text: '这将清空当前的查询设置，确定要继续吗？',
                    icon: 'question'
                }).then((result) => {
                    if (result.isConfirmed) {
                        loadSampleQueryData();
                    }
                });
            } else {
                loadSampleQueryData();
            }
        }
        
        function loadSampleQueryData() {
            // 这里可以根据可用的表来生成示例查询
            // 暂时使用一个通用的示例
            clearAllSelections();
            
            // 如果有可用的表，选择第一个作为示例
            const firstTable = $('.table-item').first();
            if (firstTable.length > 0) {
                firstTable.click();
                ToastNotification.success('已加载示例查询，请根据需要调整');
            } else {
                ToastNotification.info('暂无可用表格，无法生成示例查询');
            }
        }
        
        // === 键盘快捷键支持 ===
        
        // 添加键盘快捷键支持
        $(document).keydown(function(e) {
            // Ctrl+Enter: 执行查询
            if (e.ctrlKey && e.keyCode === 13) {
                e.preventDefault();
                if (selectedTables.length > 0) {
                    executeQuery();
                }
            }
            // Ctrl+S: 保存查询
            else if (e.ctrlKey && e.keyCode === 83) {
                e.preventDefault();
                if (selectedTables.length > 0) {
                    $('#btnSaveQuery').click();
                }
            }
            // Ctrl+E: 导出数据
            else if (e.ctrlKey && e.keyCode === 69) {
                e.preventDefault();
                if (selectedTables.length > 0) {
                    exportToExcel();
                }
            }
            // Escape: 清空选择
            else if (e.keyCode === 27) {
                e.preventDefault();
                clearAllSelections();
            }
        });
        
        // === 工具函数 ===
        
        // 计算时间差
        function getTimeAgo(date) {
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);
            
            if (diffMins < 1) return '刚刚';
            if (diffMins < 60) return `${diffMins}分钟前`;
            if (diffHours < 24) return `${diffHours}小时前`;
            if (diffDays < 7) return `${diffDays}天前`;
            return date.toLocaleDateString();
        }
        
        // 转换为CSV格式
        function convertToCSV(data) {
            if (data.length === 0) return '';
            
            const headers = Object.keys(data[0]);
            const csvContent = [
                headers.join(','),
                ...data.map(row => headers.map(header => `"${row[header] || ''}"`).join(','))
            ].join('\n');
            
            return csvContent;
        }
        
        // 下载CSV文件
        function downloadCSV(csvContent, filename) {
            const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = filename;
            link.click();
            URL.revokeObjectURL(link.href);
        }
        
        // 页面加载完成后初始化
        $(document).ready(function() {
            // 初始化查询历史UI
            updateQueryHistoryUI();
        });

        // === 面板显示/隐藏控制 ===
        
        // 面板状态管理
        const panelStates = {
            savedQueries: true,
            queryHistory: true,
            quickActions: true,
            availableTables: true
        };

        // 从localStorage加载面板状态
        function loadPanelStates() {
            const saved = localStorage.getItem('bzk_panel_states');
            if (saved) {
                try {
                    const savedStates = JSON.parse(saved);
                    Object.assign(panelStates, savedStates);
                } catch (e) {
                    console.warn('无法加载面板状态:', e);
                }
            }
        }

        // 保存面板状态到localStorage
        function savePanelStates() {
            try {
                localStorage.setItem('bzk_panel_states', JSON.stringify(panelStates));
            } catch (e) {
                console.warn('无法保存面板状态:', e);
            }
        }

        // 应用面板状态
        function applyPanelStates() {
            Object.keys(panelStates).forEach(panelKey => {
                const isExpanded = panelStates[panelKey];
                const panelId = getPanelId(panelKey);
                const toggleBtn = document.querySelector(`[data-target="${panelKey}"]`);
                const panelElement = document.getElementById(panelId);
                
                if (panelElement && toggleBtn) {
                    if (isExpanded) {
                        panelElement.classList.add('show');
                        toggleBtn.setAttribute('aria-expanded', 'true');
                    } else {
                        panelElement.classList.remove('show');
                        toggleBtn.setAttribute('aria-expanded', 'false');
                    }
                }
            });
        }

        // 获取面板ID
        function getPanelId(panelKey) {
            const mapping = {
                savedQueries: 'savedQueriesPanel',
                queryHistory: 'queryHistoryPanel',
                quickActions: 'quickActionsPanel',
                availableTables: 'availableTablesPanel'
            };
            return mapping[panelKey];
        }

        // 初始化面板状态
        function initializePanelControls() {
            loadPanelStates();
            applyPanelStates();

            // 绑定面板toggle事件
            document.querySelectorAll('.panel-toggle-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const panelKey = this.getAttribute('data-target');
                    const panelId = getPanelId(panelKey);
                    const panelElement = document.getElementById(panelId);
                    
                    if (panelElement) {
                        // 等待Bootstrap collapse完成后更新状态
                        setTimeout(() => {
                            const isExpanded = panelElement.classList.contains('show');
                            panelStates[panelKey] = isExpanded;
                            savePanelStates();
                        }, 50);
                    }
                });
            });

            // 监听Bootstrap collapse事件
            document.querySelectorAll('[id$="Panel"]').forEach(panel => {
                panel.addEventListener('shown.bs.collapse', function() {
                    const panelKey = document.querySelector(`[data-bs-target="#${this.id}"]`)?.getAttribute('data-target');
                    if (panelKey) {
                        panelStates[panelKey] = true;
                        savePanelStates();
                    }
                });

                panel.addEventListener('hidden.bs.collapse', function() {
                    const panelKey = document.querySelector(`[data-bs-target="#${this.id}"]`)?.getAttribute('data-target');
                    if (panelKey) {
                        panelStates[panelKey] = false;
                        savePanelStates();
                    }
                });
            });
        }

        // 在页面加载完成后初始化面板控制
        $(document).ready(function() {
            // 延迟一点执行，确保所有元素都已渲染
            setTimeout(initializePanelControls, 100);
        });

        // 全局面板控制函数
        function toggleAllPanels(expand = null) {
            const panels = Object.keys(panelStates);
            let shouldExpand;
            
            if (expand === null) {
                // 智能切换：如果所有面板都展开则折叠，否则展开
                shouldExpand = !Object.values(panelStates).every(state => state);
            } else {
                shouldExpand = expand;
            }
            
            let changedPanels = 0;
            
            panels.forEach(panelKey => {
                const panelId = getPanelId(panelKey);
                const panelElement = document.getElementById(panelId);
                const toggleBtn = document.querySelector(`[data-target="${panelKey}"]`);
                
                if (panelElement && toggleBtn) {
                    const currentState = panelElement.classList.contains('show');
                    
                    // 只操作需要改变状态的面板
                    if (currentState !== shouldExpand) {
                        changedPanels++;
                        
                        if (shouldExpand) {
                            new bootstrap.Collapse(panelElement, { show: true });
                        } else {
                            new bootstrap.Collapse(panelElement, { hide: true });
                        }
                    }
                    
                    panelStates[panelKey] = shouldExpand;
                }
            });
            
            savePanelStates();
            
            // 更好的用户反馈
            if (changedPanels > 0) {
                const action = shouldExpand ? '展开' : '折叠';
                ToastNotification.success(`已${action} ${changedPanels} 个面板`);
            } else {
                const currentState = shouldExpand ? '展开' : '折叠';
                ToastNotification.info(`所有面板已经是${currentState}状态`);
            }
        }

        // 可以通过键盘快捷键Ctrl+Shift+P切换所有面板
        $(document).keydown(function(e) {
            if (e.ctrlKey && e.shiftKey && e.keyCode === 80) { // Ctrl+Shift+P
                e.preventDefault();
                toggleAllPanels();
            }
        });

        // === 工具函数 ===
        
        // === 第二阶段优化：性能工具函数 ===
        
        // 防抖函数 - 避免频繁的搜索请求
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // 节流函数 - 控制高频事件
        function throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }

        // 性能监控 - 监控关键操作耗时
        const PerformanceMonitor = {
            start(label) {
                if (performance && performance.mark) {
                    performance.mark(`${label}-start`);
                }
            },
            
            end(label) {
                if (performance && performance.mark && performance.measure) {
                    performance.mark(`${label}-end`);
                    performance.measure(label, `${label}-start`, `${label}-end`);
                    
                    const measure = performance.getEntriesByName(label)[0];
                    if (measure && measure.duration > 1000) {
                        console.warn(`性能警告: ${label} 耗时 ${measure.duration.toFixed(2)}ms`);
                    }
                }
            }
        };

        // DOM优化 - 减少DOM查询
        const DOMCache = {
            cache: new Map(),
            
            get(selector) {
                if (!this.cache.has(selector)) {
                    this.cache.set(selector, document.querySelector(selector));
                }
                return this.cache.get(selector);
            },
            
            getAll(selector) {
                const cacheKey = `all:${selector}`;
                if (!this.cache.has(cacheKey)) {
                    this.cache.set(cacheKey, document.querySelectorAll(selector));
                }
                return this.cache.get(cacheKey);
            },
            
            clear() {
                this.cache.clear();
            }
        };

        // 计算时间差
        
        // === 第二阶段优化：新增功能函数 ===
        
        // PDF导出功能
        function exportToPDF() {
            if (selectedTables.length === 0) {
                ToastNotification.error('请选择至少一张表');
                return;
            }
            
            // 检查是否有查询结果
            const resultTable = document.getElementById('resultTable');
            const tbody = resultTable ? resultTable.querySelector('tbody') : null;
            
            if (!tbody || tbody.children.length === 0) {
                ToastNotification.warning('请先执行查询获取数据');
                return;
            }
            
            // 设置按钮加载状态
            ButtonManager.setLoading('#btnExportPDF', '正在导出...');
            
            // 显示信息提示
            ToastNotification.info('正在生成PDF文件，请稍候...');
            
            // 准备导出数据
            const exportData = {
                Tables: selectedTables,
                Columns: selectedColumns.length > 0 ? 
                    selectedColumns.map(col => (typeof col === 'object' && col !== null) ? col.fullName : col) : 
                    [],
                WhereConditions: whereConditions.map(cond => {
                    if (typeof cond === 'object' && cond !== null) {
                        return cond.sql || JSON.stringify(cond);
                    }
                    return cond;
                }),
                OrderBy: orderByItems.map(item => {
                    if (typeof item === 'object' && item !== null) {
                        return `${item.column} ${item.direction}`;
                    }
                    return item;
                }),
                JoinConditions: joinConditions.map(jc => (typeof jc === 'object' && jc !== null) ? jc.fullCondition : jc),
                QueryName: currentQuery ? currentQuery.name : selectedTables.join('_') + '_查询结果'
            };
            
            console.log("导出PDF，参数:", exportData);
            
            // 使用fetch API发起请求，以支持文件下载
            fetch('/QueryBuilder/ExportToPDF', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(exportData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.error || 'PDF导出失败');
                    });
                }
                return response.blob();
            })
            .then(blob => {
                // 设置按钮成功状态
                ButtonManager.setSuccess('#btnExportPDF', '导出完成');
                
                // 创建临时URL并触发下载
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                
                // 设置文件名
                const fileName = exportData.QueryName || '查询结果';
                const dateStr = new Date().toISOString().slice(0, 10);
                a.download = `${fileName}_${dateStr}.pdf`;
                
                document.body.appendChild(a);
                a.click();
                
                // 清理
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                console.log("PDF导出成功");
                
                // 添加到导出历史
                addExportToHistory(a.download, 'completed', `${(blob.size / 1024).toFixed(1)} KB`);
                
                // 显示成功提示
                ToastNotification.success('PDF文件导出成功！');
            })
            .catch(error => {
                console.error("导出PDF失败:", error);
                
                // 移除按钮加载状态
                ButtonManager.removeLoading('#btnExportPDF');
                
                // 显示错误提示
                ToastNotification.error(error.message || '导出PDF失败');
            });
        }
        
        // 数据可视化功能
        let currentChart = null;
        let chartData = null;
        
        function showDataVisualization() {
            // 检查是否有查询结果
            const resultTable = document.getElementById('resultTable');
            const tbody = resultTable ? resultTable.querySelector('tbody') : null;
            
            if (!tbody || tbody.children.length === 0) {
                ToastNotification.warning('请先执行查询获取数据');
                return;
            }
            
            // 获取表头信息
            const thead = resultTable.querySelector('thead tr');
            const columns = [];
            if (thead) {
                const headers = thead.querySelectorAll('th');
                headers.forEach((th, index) => {
                    if (index > 0) { // 跳过序号列
                        columns.push(th.textContent.trim());
                    }
                });
            }
            
            // 填充列选择下拉框
            const xAxisSelect = document.getElementById('xAxisColumn');
            const yAxisSelect = document.getElementById('yAxisColumn');
            
            xAxisSelect.innerHTML = '<option value="">请选择列</option>';
            yAxisSelect.innerHTML = '<option value="">请选择列</option>';
            
            columns.forEach(column => {
                xAxisSelect.innerHTML += `<option value="${column}">${column}</option>`;
                yAxisSelect.innerHTML += `<option value="${column}">${column}</option>`;
            });
            
            // 准备图表数据
            chartData = {
                columns: columns,
                rows: []
            };
            
            // 提取表格数据
            const rows = tbody.querySelectorAll('tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                const rowData = [];
                cells.forEach((cell, index) => {
                    if (index > 0) { // 跳过序号列
                        rowData.push(cell.textContent.trim());
                    }
                });
                chartData.rows.push(rowData);
            });
            
            // 显示模态框
            $('#dataVisualizationModal').modal('show');
            
            // 加载图表模板列表
            loadChartTemplateList();
            
            // 重置图表占位符
            document.getElementById('chartContainer').style.display = 'none';
            document.getElementById('chartPlaceholder').style.display = 'block';
        }
        
        function generateChart() {
            const chartType = document.getElementById('chartType').value;
            const xAxisColumn = document.getElementById('xAxisColumn').value;
            const yAxisColumn = document.getElementById('yAxisColumn').value;
            const aggregateFunction = document.getElementById('aggregateFunction').value;
            
            if (!xAxisColumn || !yAxisColumn) {
                ToastNotification.warning('请选择X轴和Y轴列');
                return;
            }
            
            if (!chartData || !chartData.rows.length) {
                ToastNotification.error('没有可用的数据');
                return;
            }
            
            // 获取列索引
            const xIndex = chartData.columns.indexOf(xAxisColumn);
            const yIndex = chartData.columns.indexOf(yAxisColumn);
            
            if (xIndex === -1 || yIndex === -1) {
                ToastNotification.error('选择的列不存在');
                return;
            }
            
            // 数据聚合处理
            const aggregatedData = {};
            chartData.rows.forEach(row => {
                const xValue = row[xIndex];
                const yValue = parseFloat(row[yIndex]) || 0;
                
                if (!aggregatedData[xValue]) {
                    aggregatedData[xValue] = [];
                }
                aggregatedData[xValue].push(yValue);
            });
            
            // 根据聚合函数处理数据
            const labels = Object.keys(aggregatedData);
            const values = labels.map(label => {
                const values = aggregatedData[label];
                switch (aggregateFunction) {
                    case 'sum':
                        return values.reduce((a, b) => a + b, 0);
                    case 'avg':
                        return values.reduce((a, b) => a + b, 0) / values.length;
                    case 'max':
                        return Math.max(...values);
                    case 'min':
                        return Math.min(...values);
                    case 'count':
                    default:
                        return values.length;
                }
            });
            
            // 隐藏占位符，显示图表容器
            document.getElementById('chartPlaceholder').style.display = 'none';
            document.getElementById('chartContainer').style.display = 'block';
            
            // 销毁现有图表
            if (currentChart) {
                currentChart.destroy();
                currentChart = null;
            }
            
            // 创建新图表
            const ctx = document.getElementById('dataChart').getContext('2d');
            
            const config = {
                type: chartType,
                data: {
                    labels: labels,
                    datasets: [{
                        label: `${yAxisColumn} (${aggregateFunction})`,
                        data: values,
                        backgroundColor: generateColors(labels.length, 0.6),
                        borderColor: generateColors(labels.length, 1),
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: `${xAxisColumn} vs ${yAxisColumn}`
                        },
                        legend: {
                            display: chartType !== 'pie' && chartType !== 'doughnut'
                        }
                    },
                    scales: chartType !== 'pie' && chartType !== 'doughnut' ? {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: yAxisColumn
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: xAxisColumn
                            }
                        }
                    } : {}
                }
            };
            
            try {
                currentChart = new Chart(ctx, config);
                ToastNotification.success('图表生成成功！');
            } catch (error) {
                console.error('图表生成失败:', error);
                ToastNotification.error('图表生成失败: ' + error.message);
            }
        }
        
        // 生成颜色数组
        function generateColors(count, alpha = 1) {
            const colors = [
                `rgba(255, 99, 132, ${alpha})`,
                `rgba(54, 162, 235, ${alpha})`,
                `rgba(255, 205, 86, ${alpha})`,
                `rgba(75, 192, 192, ${alpha})`,
                `rgba(153, 102, 255, ${alpha})`,
                `rgba(255, 159, 64, ${alpha})`,
                `rgba(199, 199, 199, ${alpha})`,
                `rgba(83, 102, 255, ${alpha})`
            ];
            
            const result = [];
            for (let i = 0; i < count; i++) {
                result.push(colors[i % colors.length]);
            }
            return result;
        }
        
        // 导出图表
        function exportChart() {
            if (!currentChart) {
                ToastNotification.warning('请先生成图表');
                return;
            }
            
            try {
                const canvas = document.getElementById('dataChart');
                const url = canvas.toDataURL('image/png');
                const a = document.createElement('a');
                a.href = url;
                a.download = `chart_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.png`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                
                ToastNotification.success('图表导出成功！');
            } catch (error) {
                console.error('图表导出失败:', error);
                ToastNotification.error('图表导出失败: ' + error.message);
            }
        }
        
        // 保存图表模板
        function saveChartAsTemplate() {
            if (!currentChart) {
                ToastNotification.warning('请先生成图表');
                return;
            }
            
            const templateName = prompt('请输入模板名称:');
            if (!templateName) return;
            
            const template = {
                name: templateName,
                chartType: document.getElementById('chartType').value,
                xAxisColumn: document.getElementById('xAxisColumn').value,
                yAxisColumn: document.getElementById('yAxisColumn').value,
                aggregateFunction: document.getElementById('aggregateFunction').value,
                createdAt: new Date().toISOString()
            };
            
            // 保存到本地存储
            const templates = JSON.parse(localStorage.getItem('chartTemplates') || '[]');
            templates.push(template);
            localStorage.setItem('chartTemplates', JSON.stringify(templates));
            
            ToastNotification.success('图表模板保存成功！');
            
            // 更新模板选择列表
            loadChartTemplateList();
        }
        
        // 加载图表模板列表
        function loadChartTemplateList() {
            const templates = JSON.parse(localStorage.getItem('chartTemplates') || '[]');
            const select = document.getElementById('chartTemplateSelect');
            
            // 清空现有选项
            select.innerHTML = '<option value="">选择模板...</option>';
            
            // 添加模板选项
            templates.forEach((template, index) => {
                const option = document.createElement('option');
                option.value = index;
                option.textContent = `${template.name} (${new Date(template.createdAt).toLocaleDateString()})`;
                select.appendChild(option);
            });
        }
        
        // 加载图表模板
        function loadChartTemplate() {
            const select = document.getElementById('chartTemplateSelect');
            const selectedIndex = select.value;
            
            if (selectedIndex === '') {
                ToastNotification.warning('请先选择一个模板');
                return;
            }
            
            const templates = JSON.parse(localStorage.getItem('chartTemplates') || '[]');
            const template = templates[selectedIndex];
            
            if (!template) {
                ToastNotification.error('模板不存在');
                return;
            }
            
            // 应用模板配置
            document.getElementById('chartType').value = template.chartType;
            document.getElementById('aggregateFunction').value = template.aggregateFunction;
            
            // 检查X轴和Y轴字段是否存在于当前数据中
            const xAxisSelect = document.getElementById('xAxisColumn');
            const yAxisSelect = document.getElementById('yAxisColumn');
            
            // 尝试设置X轴字段
            let xAxisFound = false;
            for (let option of xAxisSelect.options) {
                if (option.value === template.xAxisColumn) {
                    option.selected = true;
                    xAxisFound = true;
                    break;
                }
            }
            
            // 尝试设置Y轴字段
            let yAxisFound = false;
            for (let option of yAxisSelect.options) {
                if (option.value === template.yAxisColumn) {
                    option.selected = true;
                    yAxisFound = true;
                    break;
                }
            }
            
            let message = `模板"${template.name}"已加载`;
            if (!xAxisFound || !yAxisFound) {
                message += '，但部分字段在当前数据中不存在，请检查字段选择';
                ToastNotification.warning(message);
            } else {
                ToastNotification.success(message);
            }
        }
        
        // 删除图表模板
        function deleteChartTemplate() {
            const select = document.getElementById('chartTemplateSelect');
            const selectedIndex = select.value;
            
            if (selectedIndex === '') {
                ToastNotification.warning('请先选择要删除的模板');
                return;
            }
            
            const templates = JSON.parse(localStorage.getItem('chartTemplates') || '[]');
            const template = templates[selectedIndex];
            
            if (!template) {
                ToastNotification.error('模板不存在');
                return;
            }
            
            // 使用SweetAlert确认删除
            Swal.fire({
                title: '确认删除',
                text: `确定要删除模板"${template.name}"吗？此操作不可撤销。`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '删除',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    // 删除模板
                    templates.splice(selectedIndex, 1);
                    localStorage.setItem('chartTemplates', JSON.stringify(templates));
                    
                    // 更新模板列表
                    loadChartTemplateList();
                    
                    ToastNotification.success(`模板"${template.name}"已删除`);
                }
            });
        }
        
        // 显示统计信息
        function showStatistics() {
            // 检查是否有查询结果
            const resultTable = document.getElementById('resultTable');
            const tbody = resultTable ? resultTable.querySelector('tbody') : null;
            
            if (!tbody || tbody.children.length === 0) {
                ToastNotification.warning('请先执行查询获取数据');
                return;
            }
            
            // 显示/隐藏统计区域
            const statsArea = document.getElementById('statsArea');
            if (statsArea.style.display === 'none' || !statsArea.style.display) {
                generateStatistics();
                statsArea.style.display = 'block';
                document.getElementById('btnShowStats').innerHTML = '<i class="fas fa-eye-slash"></i> 隐藏统计';
            } else {
                statsArea.style.display = 'none';
                document.getElementById('btnShowStats').innerHTML = '<i class="fas fa-calculator"></i> 统计';
            }
        }
        
        // 生成统计信息
        function generateStatistics() {
            const resultTable = document.getElementById('resultTable');
            const thead = resultTable.querySelector('thead tr');
            const tbody = resultTable.querySelector('tbody');
            
            const headers = [];
            const headerElements = thead.querySelectorAll('th');
            headerElements.forEach((th, index) => {
                if (index > 0) { // 跳过序号列
                    headers.push(th.textContent.trim());
                }
            });
            
            const rows = tbody.querySelectorAll('tr');
            const columnData = headers.map(() => []);
            
            // 收集数据
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                cells.forEach((cell, index) => {
                    if (index > 0 && index <= headers.length) { // 跳过序号列
                        const value = cell.textContent.trim();
                        columnData[index - 1].push(value);
                    }
                });
            });
            
            // 生成统计信息HTML
            let statsHtml = '';
            headers.forEach((header, index) => {
                const data = columnData[index];
                const numericData = data.map(v => parseFloat(v)).filter(v => !isNaN(v));
                const isNumeric = numericData.length > 0;
                
                statsHtml += `
                    <div class="col-md-3 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">${header}</h6>
                                <div class="stats-info">
                                    <p><strong>总数:</strong> ${data.length}</p>
                                    <p><strong>唯一值:</strong> ${new Set(data).size}</p>
                `;
                
                if (isNumeric) {
                    const sum = numericData.reduce((a, b) => a + b, 0);
                    const avg = sum / numericData.length;
                    const max = Math.max(...numericData);
                    const min = Math.min(...numericData);
                    
                    statsHtml += `
                        <p><strong>数值统计:</strong></p>
                        <p>平均值: ${avg.toFixed(2)}</p>
                        <p>最大值: ${max}</p>
                        <p>最小值: ${min}</p>
                        <p>总和: ${sum.toFixed(2)}</p>
                    `;
                } else {
                    // 显示最常见的值
                    const frequency = {};
                    data.forEach(value => {
                        frequency[value] = (frequency[value] || 0) + 1;
                    });
                    const mostCommon = Object.keys(frequency).reduce((a, b) => 
                        frequency[a] > frequency[b] ? a : b
                    );
                    
                    statsHtml += `
                        <p><strong>最常见值:</strong></p>
                        <p>${mostCommon} (${frequency[mostCommon]}次)</p>
                    `;
                }
                
                statsHtml += `
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            document.getElementById('statsContent').innerHTML = statsHtml;
        }
        
        // 第二阶段优化：导出任务管理功能
        function showExportTaskManager() {
            // 显示导出任务管理模态框
            const modal = new bootstrap.Modal(document.getElementById('exportTaskModal'));
            modal.show();
            
            // 加载当前导出任务和历史
            loadExportTasks();
        }
        
        // 加载导出任务
        function loadExportTasks() {
            // 模拟加载当前任务
            const activeTasksContainer = document.getElementById('activeExportTasks');
            const historyContainer = document.getElementById('exportHistory');
            
            // 从本地存储获取导出历史
            const exportHistory = JSON.parse(localStorage.getItem('exportHistory') || '[]');
            
            // 显示活动任务（模拟）
            activeTasksContainer.innerHTML = `
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i> 当前没有进行中的导出任务
                </div>
            `;
            
            // 显示导出历史
            if (exportHistory.length === 0) {
                historyContainer.innerHTML = '<p class="text-muted">暂无导出历史</p>';
            } else {
                let historyHtml = '';
                exportHistory.slice(-10).reverse().forEach((task, index) => {
                    const statusClass = task.status === 'completed' ? 'success' : 
                                       task.status === 'failed' ? 'danger' : 'warning';
                    const statusIcon = task.status === 'completed' ? 'check-circle' : 
                                      task.status === 'failed' ? 'times-circle' : 'clock';
                    
                    historyHtml += `
                        <div class="card mb-2">
                            <div class="card-body py-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">${task.fileName}</h6>
                                        <small class="text-muted">${task.timestamp}</small>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge bg-${statusClass}">
                                            <i class="fas fa-${statusIcon}"></i> ${task.status}
                                        </span>
                                        ${task.status === 'completed' ? 
                                            `<br><small class="text-muted">${task.fileSize || 'N/A'}</small>` : ''}
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                });
                historyContainer.innerHTML = historyHtml;
            }
        }
        
        // 取消所有导出任务
        function cancelAllExports() {
            ModernDialog.confirm({
                title: '确认取消',
                text: '确定要取消所有进行中的导出任务吗？',
                icon: 'warning'
            }).then((result) => {
                if (result.isConfirmed) {
                    // 这里应该调用后端API取消任务
                    ToastNotification.success('所有导出任务已取消');
                    loadExportTasks();
                }
            });
        }
        
        // 清除导出历史
        function clearExportHistory() {
            ModernDialog.confirm({
                title: '确认清除',
                text: '确定要清除所有导出历史记录吗？此操作无法撤销。',
                icon: 'warning'
            }).then((result) => {
                if (result.isConfirmed) {
                    localStorage.removeItem('exportHistory');
                    ToastNotification.success('导出历史已清除');
                    loadExportTasks();
                }
            });
        }
        
        // 添加导出任务到历史记录
        function addExportToHistory(fileName, status, fileSize = null) {
            const exportHistory = JSON.parse(localStorage.getItem('exportHistory') || '[]');
            const task = {
                fileName: fileName,
                status: status,
                timestamp: new Date().toLocaleString('zh-CN'),
                fileSize: fileSize
            };
            
            exportHistory.push(task);
            
            // 只保留最近50条记录
            if (exportHistory.length > 50) {
                exportHistory.splice(0, exportHistory.length - 50);
            }
            
            localStorage.setItem('exportHistory', JSON.stringify(exportHistory));
        }
    </script>
    
    <!-- 处理ViewBag.ShowSavedQueries -->
    <script>
        $(document).ready(function() {
            // 如果是从"查看已保存查询"按钮进入，高亮显示已保存查询部分
            @if (ViewBag.ShowSavedQueries == true)
            {
                <text>
                // 高亮显示已保存查询卡片
                $(".saved-queries-card .card-header").addClass("bg-success").removeClass("bg-primary");
                $(".saved-queries-card .card-header h5").prepend('<i class="fas fa-check-circle mr-2"></i> ');
                
                // 如果需要，可以滚动到已保存查询卡片
                $('html, body').animate({
                    scrollTop: $(".saved-queries-card").offset().top - 100
                }, 500);
                </text>
            }
        });
    </script>

    <!-- 第二阶段C优化：实时通信功能初始化 -->
    <script>
        // 实时通信客户端实例
        let realtimeClient = null;
        
        $(document).ready(function() {
            // 简单的连接状态测试
            setTimeout(function() {
                const textElement = document.getElementById('connection-text');
                const indicatorElement = document.getElementById('connection-indicator');
                
                if (textElement && indicatorElement) {
                    // 手动设置连接状态为中文
                    textElement.textContent = '已连接';
                    textElement.className = 'small text-success';
                    indicatorElement.style.backgroundColor = '#28a745';
                    
                    console.log('连接状态已手动设置为: 已连接');
                }
            }, 1000);
            
            // 初始化实时通信客户端
            if (typeof QueryNotificationClient !== 'undefined') {
                realtimeClient = new QueryNotificationClient();
                
                // 监听实时事件
                $(document).on('queryProgress', function(e, progress) {
                    console.log('收到查询进度更新:', progress);
                });
                
                $(document).on('queryCompleted', function(e, result) {
                    console.log('查询完成:', result);
                    // 如果查询成功，可以刷新结果表格
                    if (result.isSuccess) {
                        setTimeout(() => {
                            // 这里可以添加刷新结果的逻辑
                            console.log('查询成功，可以刷新结果');
                        }, 1000);
                    }
                });
                
                $(document).on('systemNotification', function(e, notification) {
                    console.log('系统通知:', notification);
                });
                
                console.log('实时通信功能已初始化');
            } else {
                console.warn('QueryNotificationClient 类未找到，实时通信功能不可用');
            }
        });
        
        // 模拟查询进度功能（测试用）
        function simulateQueryProgress() {
            if (realtimeClient) {
                const queryId = 'test-' + Date.now();
                
                // 显示进度条
                $('#query-progress-container').show();
                
                let progress = 0;
                const interval = setInterval(() => {
                    progress += Math.random() * 20;
                    if (progress > 100) progress = 100;
                    
                    // 手动更新进度（模拟SignalR推送）
                    realtimeClient.updateProgressBar(queryId, Math.floor(progress), `正在处理数据... ${Math.floor(progress)}%`);
                    
                    if (progress >= 100) {
                        clearInterval(interval);
                        
                        // 模拟查询完成
                        setTimeout(() => {
                            realtimeClient.hideProgressBar(queryId);
                            realtimeClient.showCompletionNotification({
                                queryId: queryId,
                                isSuccess: true,
                                recordCount: Math.floor(Math.random() * 1000) + 100,
                                executionTime: (Math.random() * 5000) + 1000
                            });
                        }, 500);
                    }
                }, 300);
            }
        }
        
        // 测试连接状态显示
        function testConnectionStatus() {
            const statuses = ['connected', 'reconnecting', 'disconnected'];
            let index = 0;
            
            setInterval(() => {
                if (realtimeClient) {
                    realtimeClient.showConnectionStatus(statuses[index]);
                    index = (index + 1) % statuses.length;
                }
            }, 3000);
        }
        
        // 添加测试按钮到页面（仅在开发模式下）
        @if (ViewBag.IsDevelopment == true)
        {
            <text>
            $(document).ready(function() {
                // 添加测试按钮
                const testPanel = `
                    <div class="card mt-3 border-warning">
                        <div class="card-header bg-warning text-dark">
                            <h6 class="mb-0"><i class="fas fa-flask"></i> 实时通信功能测试</h6>
                        </div>
                        <div class="card-body">
                            <button type="button" class="btn btn-sm btn-primary me-2" onclick="simulateQueryProgress()">
                                <i class="fas fa-play"></i> 模拟查询进度
                            </button>
                            <button type="button" class="btn btn-sm btn-info me-2" onclick="testConnectionStatus()">
                                <i class="fas fa-wifi"></i> 测试连接状态
                            </button>
                            <button type="button" class="btn btn-sm btn-success" onclick="realtimeClient?.showToastNotification({title:'测试通知',message:'这是一条测试消息',type:'Success'})">
                                <i class="fas fa-bell"></i> 测试通知
                            </button>
                        </div>
                    </div>
                `;
                
                $('#realtime-containers').after(testPanel);
            });
            </text>
        }
    </script>
}
</div> <!-- 闭合content-below-navbar div -->
